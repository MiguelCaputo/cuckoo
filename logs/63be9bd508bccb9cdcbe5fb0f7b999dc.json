{
    "behavior": {
        "apistats": {
            "2660": {
                "GetSystemTimeAsFileTime": 3,
                "NtClose": 2,
                "NtCreateFile": 1,
                "NtMapViewOfSection": 2,
                "NtUnmapViewOfSection": 2,
                "SetUnhandledExceptionFilter": 1
            }
        },
        "generic": [
            {
                "first_seen": 1646705284.670801,
                "pid": 2660,
                "ppid": 2636,
                "process_name": "rechne.exe",
                "process_path": "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.exe",
                "summary": {
                    "file_failed": [
                        "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.ini"
                    ]
                }
            },
            {
                "first_seen": 1646705284.4212,
                "pid": 484,
                "ppid": 368,
                "process_name": "lsass.exe",
                "process_path": "C:\\Windows\\System32\\lsass.exe",
                "summary": {}
            }
        ],
        "processes": [
            {
                "calls": [],
                "command_line": "C:\\Windows\\system32\\lsass.exe",
                "first_seen": 1646705284.4212,
                "modules": [
                    {
                        "baseaddr": "0xff4c0000",
                        "basename": "lsass.exe",
                        "filepath": "C:\\Windows\\system32\\lsass.exe",
                        "imgsize": 49152
                    },
                    {
                        "baseaddr": "0x77bd0000",
                        "basename": "ntdll.dll",
                        "filepath": "C:\\Windows\\SYSTEM32\\ntdll.dll",
                        "imgsize": 1740800
                    },
                    {
                        "baseaddr": "0x779b0000",
                        "basename": "kernel32.dll",
                        "filepath": "C:\\Windows\\system32\\kernel32.dll",
                        "imgsize": 1175552
                    },
                    {
                        "baseaddr": "0x7fefdde0000",
                        "basename": "KERNELBASE.dll",
                        "filepath": "C:\\Windows\\system32\\KERNELBASE.dll",
                        "imgsize": 438272
                    },
                    {
                        "baseaddr": "0x7feffe40000",
                        "basename": "msvcrt.dll",
                        "filepath": "C:\\Windows\\system32\\msvcrt.dll",
                        "imgsize": 651264
                    },
                    {
                        "baseaddr": "0x7feffb20000",
                        "basename": "RPCRT4.dll",
                        "filepath": "C:\\Windows\\system32\\RPCRT4.dll",
                        "imgsize": 1232896
                    },
                    {
                        "baseaddr": "0x7fefd970000",
                        "basename": "SspiSrv.dll",
                        "filepath": "C:\\Windows\\system32\\SspiSrv.dll",
                        "imgsize": 45056
                    },
                    {
                        "baseaddr": "0x7fefd7e0000",
                        "basename": "lsasrv.dll",
                        "filepath": "C:\\Windows\\system32\\lsasrv.dll",
                        "imgsize": 1470464
                    },
                    {
                        "baseaddr": "0x7feffc50000",
                        "basename": "sechost.dll",
                        "filepath": "C:\\Windows\\SYSTEM32\\sechost.dll",
                        "imgsize": 126976
                    },
                    {
                        "baseaddr": "0x7fefd980000",
                        "basename": "SspiCli.dll",
                        "filepath": "C:\\Windows\\system32\\SspiCli.dll",
                        "imgsize": 151552
                    },
                    {
                        "baseaddr": "0x7fefe7a0000",
                        "basename": "ADVAPI32.dll",
                        "filepath": "C:\\Windows\\system32\\ADVAPI32.dll",
                        "imgsize": 897024
                    },
                    {
                        "baseaddr": "0x77ad0000",
                        "basename": "USER32.dll",
                        "filepath": "C:\\Windows\\system32\\USER32.dll",
                        "imgsize": 1024000
                    },
                    {
                        "baseaddr": "0x7fefe9e0000",
                        "basename": "GDI32.dll",
                        "filepath": "C:\\Windows\\system32\\GDI32.dll",
                        "imgsize": 421888
                    },
                    {
                        "baseaddr": "0x7fefea50000",
                        "basename": "LPK.dll",
                        "filepath": "C:\\Windows\\system32\\LPK.dll",
                        "imgsize": 57344
                    },
                    {
                        "baseaddr": "0x7fefe6d0000",
                        "basename": "USP10.dll",
                        "filepath": "C:\\Windows\\system32\\USP10.dll",
                        "imgsize": 823296
                    },
                    {
                        "baseaddr": "0x7fefd700000",
                        "basename": "SAMSRV.dll",
                        "filepath": "C:\\Windows\\system32\\SAMSRV.dll",
                        "imgsize": 774144
                    },
                    {
                        "baseaddr": "0x7fefd660000",
                        "basename": "cryptdll.dll",
                        "filepath": "C:\\Windows\\system32\\cryptdll.dll",
                        "imgsize": 81920
                    },
                    {
                        "baseaddr": "0x7fefdbc0000",
                        "basename": "MSASN1.dll",
                        "filepath": "C:\\Windows\\system32\\MSASN1.dll",
                        "imgsize": 61440
                    },
                    {
                        "baseaddr": "0x7fefd5f0000",
                        "basename": "wevtapi.dll",
                        "filepath": "C:\\Windows\\system32\\wevtapi.dll",
                        "imgsize": 446464
                    },
                    {
                        "baseaddr": "0x7fefebe0000",
                        "basename": "IMM32.DLL",
                        "filepath": "C:\\Windows\\system32\\IMM32.DLL",
                        "imgsize": 188416
                    },
                    {
                        "baseaddr": "0x7fefec10000",
                        "basename": "MSCTF.dll",
                        "filepath": "C:\\Windows\\system32\\MSCTF.dll",
                        "imgsize": 1085440
                    },
                    {
                        "baseaddr": "0x7fefd5b0000",
                        "basename": "cngaudit.dll",
                        "filepath": "C:\\Windows\\system32\\cngaudit.dll",
                        "imgsize": 36864
                    },
                    {
                        "baseaddr": "0x7fefd580000",
                        "basename": "AUTHZ.dll",
                        "filepath": "C:\\Windows\\system32\\AUTHZ.dll",
                        "imgsize": 192512
                    },
                    {
                        "baseaddr": "0x7fefd530000",
                        "basename": "ncrypt.dll",
                        "filepath": "C:\\Windows\\system32\\ncrypt.dll",
                        "imgsize": 319488
                    },
                    {
                        "baseaddr": "0x7fefd500000",
                        "basename": "bcrypt.dll",
                        "filepath": "C:\\Windows\\system32\\bcrypt.dll",
                        "imgsize": 139264
                    },
                    {
                        "baseaddr": "0x758f0000",
                        "basename": "msprivs.DLL",
                        "filepath": "C:\\Windows\\system32\\msprivs.DLL",
                        "imgsize": 8192
                    },
                    {
                        "baseaddr": "0x7fefd4c0000",
                        "basename": "netjoin.dll",
                        "filepath": "C:\\Windows\\system32\\netjoin.dll",
                        "imgsize": 204800
                    },
                    {
                        "baseaddr": "0x7fefd490000",
                        "basename": "negoexts.DLL",
                        "filepath": "C:\\Windows\\system32\\negoexts.DLL",
                        "imgsize": 147456
                    },
                    {
                        "baseaddr": "0x7fefd7c0000",
                        "basename": "Secur32.dll",
                        "filepath": "C:\\Windows\\system32\\Secur32.dll",
                        "imgsize": 45056
                    },
                    {
                        "baseaddr": "0x7fefda10000",
                        "basename": "cryptbase.dll",
                        "filepath": "C:\\Windows\\system32\\cryptbase.dll",
                        "imgsize": 61440
                    },
                    {
                        "baseaddr": "0x7fefd3d0000",
                        "basename": "kerberos.DLL",
                        "filepath": "C:\\Windows\\system32\\kerberos.DLL",
                        "imgsize": 737280
                    },
                    {
                        "baseaddr": "0x7fefd3b0000",
                        "basename": "CRYPTSP.dll",
                        "filepath": "C:\\Windows\\system32\\CRYPTSP.dll",
                        "imgsize": 94208
                    },
                    {
                        "baseaddr": "0x7fefdef0000",
                        "basename": "WS2_32.dll",
                        "filepath": "C:\\Windows\\system32\\WS2_32.dll",
                        "imgsize": 315392
                    },
                    {
                        "baseaddr": "0x7fefed80000",
                        "basename": "NSI.dll",
                        "filepath": "C:\\Windows\\system32\\NSI.dll",
                        "imgsize": 32768
                    },
                    {
                        "baseaddr": "0x7fefd350000",
                        "basename": "mswsock.dll",
                        "filepath": "C:\\Windows\\system32\\mswsock.dll",
                        "imgsize": 348160
                    },
                    {
                        "baseaddr": "0x7fefd340000",
                        "basename": "wship6.dll",
                        "filepath": "C:\\Windows\\System32\\wship6.dll",
                        "imgsize": 28672
                    },
                    {
                        "baseaddr": "0x7fefd2e0000",
                        "basename": "msv1_0.DLL",
                        "filepath": "C:\\Windows\\system32\\msv1_0.DLL",
                        "imgsize": 331776
                    },
                    {
                        "baseaddr": "0x7fefd230000",
                        "basename": "netlogon.DLL",
                        "filepath": "C:\\Windows\\system32\\netlogon.DLL",
                        "imgsize": 712704
                    },
                    {
                        "baseaddr": "0x7fefd1d0000",
                        "basename": "DNSAPI.dll",
                        "filepath": "C:\\Windows\\system32\\DNSAPI.dll",
                        "imgsize": 372736
                    },
                    {
                        "baseaddr": "0x7fefd1a0000",
                        "basename": "logoncli.dll",
                        "filepath": "C:\\Windows\\system32\\logoncli.dll",
                        "imgsize": 196608
                    },
                    {
                        "baseaddr": "0x7fefd140000",
                        "basename": "schannel.DLL",
                        "filepath": "C:\\Windows\\system32\\schannel.DLL",
                        "imgsize": 356352
                    },
                    {
                        "baseaddr": "0x7fefdc70000",
                        "basename": "CRYPT32.dll",
                        "filepath": "C:\\Windows\\system32\\CRYPT32.dll",
                        "imgsize": 1470464
                    },
                    {
                        "baseaddr": "0x7fefd100000",
                        "basename": "wdigest.DLL",
                        "filepath": "C:\\Windows\\system32\\wdigest.DLL",
                        "imgsize": 221184
                    },
                    {
                        "baseaddr": "0x7fefd0b0000",
                        "basename": "rsaenh.dll",
                        "filepath": "C:\\Windows\\system32\\rsaenh.dll",
                        "imgsize": 290816
                    },
                    {
                        "baseaddr": "0x7fefd090000",
                        "basename": "tspkg.DLL",
                        "filepath": "C:\\Windows\\system32\\tspkg.DLL",
                        "imgsize": 98304
                    },
                    {
                        "baseaddr": "0x7fefd040000",
                        "basename": "pku2u.DLL",
                        "filepath": "C:\\Windows\\system32\\pku2u.DLL",
                        "imgsize": 282624
                    },
                    {
                        "baseaddr": "0x7fefcff0000",
                        "basename": "bcryptprimitives.dll",
                        "filepath": "C:\\Windows\\system32\\bcryptprimitives.dll",
                        "imgsize": 311296
                    },
                    {
                        "baseaddr": "0x7fefdb00000",
                        "basename": "RpcRtRemote.dll",
                        "filepath": "C:\\Windows\\system32\\RpcRtRemote.dll",
                        "imgsize": 81920
                    },
                    {
                        "baseaddr": "0x7fefcfd0000",
                        "basename": "efslsaext.dll",
                        "filepath": "C:\\Windows\\system32\\efslsaext.dll",
                        "imgsize": 73728
                    },
                    {
                        "baseaddr": "0x7fefcf90000",
                        "basename": "scecli.DLL",
                        "filepath": "C:\\Windows\\system32\\scecli.DLL",
                        "imgsize": 253952
                    },
                    {
                        "baseaddr": "0x7fefcf80000",
                        "basename": "credssp.dll",
                        "filepath": "C:\\Windows\\system32\\credssp.dll",
                        "imgsize": 40960
                    },
                    {
                        "baseaddr": "0x7fefdac0000",
                        "basename": "WINSTA.dll",
                        "filepath": "C:\\Windows\\system32\\WINSTA.dll",
                        "imgsize": 249856
                    },
                    {
                        "baseaddr": "0x7fefb500000",
                        "basename": "IPHLPAPI.DLL",
                        "filepath": "C:\\Windows\\system32\\IPHLPAPI.DLL",
                        "imgsize": 159744
                    },
                    {
                        "baseaddr": "0x7fefb590000",
                        "basename": "WINNSI.DLL",
                        "filepath": "C:\\Windows\\system32\\WINNSI.DLL",
                        "imgsize": 45056
                    },
                    {
                        "baseaddr": "0x7fefb780000",
                        "basename": "netutils.dll",
                        "filepath": "C:\\Windows\\system32\\netutils.dll",
                        "imgsize": 49152
                    },
                    {
                        "baseaddr": "0x7fefce70000",
                        "basename": "USERENV.dll",
                        "filepath": "C:\\Windows\\system32\\USERENV.dll",
                        "imgsize": 122880
                    },
                    {
                        "baseaddr": "0x7fefdb20000",
                        "basename": "profapi.dll",
                        "filepath": "C:\\Windows\\system32\\profapi.dll",
                        "imgsize": 61440
                    },
                    {
                        "baseaddr": "0x7fefcd50000",
                        "basename": "wshtcpip.dll",
                        "filepath": "C:\\Windows\\System32\\wshtcpip.dll",
                        "imgsize": 28672
                    },
                    {
                        "baseaddr": "0x7fef22e0000",
                        "basename": "dssenh.dll",
                        "filepath": "C:\\Windows\\system32\\dssenh.dll",
                        "imgsize": 204800
                    },
                    {
                        "baseaddr": "0x7fefce50000",
                        "basename": "GPAPI.dll",
                        "filepath": "C:\\Windows\\system32\\GPAPI.dll",
                        "imgsize": 110592
                    },
                    {
                        "baseaddr": "0x750c0000",
                        "basename": "monitor-x64.dll",
                        "filepath": "C:\\tmpahkc3f\\bin\\monitor-x64.dll",
                        "imgsize": 2269184
                    }
                ],
                "pid": 484,
                "ppid": 368,
                "process_name": "lsass.exe",
                "process_path": "C:\\Windows\\System32\\lsass.exe",
                "tid": 2600,
                "time": 0,
                "track": false,
                "type": "process"
            },
            {
                "calls": [
                    {
                        "api": "GetSystemTimeAsFileTime",
                        "arguments": {},
                        "category": "synchronisation",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2664,
                        "time": 1646705284.779801
                    },
                    {
                        "api": "SetUnhandledExceptionFilter",
                        "arguments": {},
                        "category": "exception",
                        "flags": {},
                        "last_error": 0,
                        "nt_status": -1073741515,
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 0,
                        "tid": 2664,
                        "time": 1646705284.779801
                    },
                    {
                        "api": "GetSystemTimeAsFileTime",
                        "arguments": {},
                        "category": "synchronisation",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2664,
                        "time": 1646705284.779801
                    },
                    {
                        "api": "GetSystemTimeAsFileTime",
                        "arguments": {},
                        "category": "synchronisation",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2664,
                        "time": 1646705284.779801
                    },
                    {
                        "api": "NtCreateFile",
                        "arguments": {
                            "create_disposition": 1,
                            "create_options": 96,
                            "desired_access": "0x80100080",
                            "file_attributes": 128,
                            "file_handle": "0x00000000750cb1df",
                            "filepath": "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.ini",
                            "filepath_r": "rechne.ini",
                            "share_access": 3,
                            "status_info": 4294967295
                        },
                        "category": "file",
                        "flags": {
                            "create_disposition": "FILE_OPEN",
                            "create_options": "FILE_NON_DIRECTORY_FILE|FILE_SYNCHRONOUS_IO_NONALERT",
                            "desired_access": "FILE_READ_ATTRIBUTES|SYNCHRONIZE",
                            "file_attributes": "FILE_ATTRIBUTE_NORMAL",
                            "share_access": "FILE_SHARE_READ|FILE_SHARE_WRITE",
                            "status_info": ""
                        },
                        "last_error": 0,
                        "nt_status": -1073741515,
                        "return_value": -1073741772,
                        "stacktrace": [],
                        "status": 0,
                        "tid": 2664,
                        "time": 1646705284.795801
                    },
                    {
                        "api": "NtMapViewOfSection",
                        "arguments": {
                            "allocation_type": 0,
                            "base_address": "0x0000000000560000",
                            "buffer": "",
                            "commit_size": 65536,
                            "process_handle": "0xffffffffffffffff",
                            "process_identifier": 2660,
                            "section_handle": "0x0000000000000030",
                            "section_offset": 0,
                            "view_size": 65536,
                            "win32_protect": 4
                        },
                        "category": "process",
                        "flags": {
                            "allocation_type": "",
                            "win32_protect": "PAGE_READWRITE"
                        },
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 316,
                        "time": 1646705355.338801
                    },
                    {
                        "api": "NtUnmapViewOfSection",
                        "arguments": {
                            "base_address": "0x0000000000560000",
                            "process_handle": "0xffffffffffffffff",
                            "process_identifier": 2660,
                            "region_size": 65536
                        },
                        "category": "process",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 316,
                        "time": 1646705355.338801
                    },
                    {
                        "api": "NtClose",
                        "arguments": {
                            "handle": "0x0000000000000030"
                        },
                        "category": "system",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 316,
                        "time": 1646705355.338801
                    },
                    {
                        "api": "NtMapViewOfSection",
                        "arguments": {
                            "allocation_type": 0,
                            "base_address": "0x0000000000560000",
                            "buffer": "",
                            "commit_size": 65536,
                            "process_handle": "0xffffffffffffffff",
                            "process_identifier": 2660,
                            "section_handle": "0x0000000000000030",
                            "section_offset": 0,
                            "view_size": 65536,
                            "win32_protect": 4
                        },
                        "category": "process",
                        "flags": {
                            "allocation_type": "",
                            "win32_protect": "PAGE_READWRITE"
                        },
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2628,
                        "time": 1646705355.463801
                    },
                    {
                        "api": "NtUnmapViewOfSection",
                        "arguments": {
                            "base_address": "0x0000000000560000",
                            "process_handle": "0xffffffffffffffff",
                            "process_identifier": 2660,
                            "region_size": 65536
                        },
                        "category": "process",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2628,
                        "time": 1646705355.463801
                    },
                    {
                        "api": "NtClose",
                        "arguments": {
                            "handle": "0x0000000000000030"
                        },
                        "category": "system",
                        "flags": {},
                        "return_value": 0,
                        "stacktrace": [],
                        "status": 1,
                        "tid": 2628,
                        "time": 1646705355.463801
                    }
                ],
                "command_line": "\"C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.exe\" ",
                "first_seen": 1646705284.670801,
                "modules": [
                    {
                        "baseaddr": "0x400000",
                        "basename": "rechne.exe",
                        "filepath": "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.exe",
                        "imgsize": 335872
                    },
                    {
                        "baseaddr": "0x77bd0000",
                        "basename": "ntdll.dll",
                        "filepath": "C:\\Windows\\SYSTEM32\\ntdll.dll",
                        "imgsize": 1740800
                    },
                    {
                        "baseaddr": "0x779b0000",
                        "basename": "kernel32.dll",
                        "filepath": "C:\\Windows\\system32\\kernel32.dll",
                        "imgsize": 1175552
                    },
                    {
                        "baseaddr": "0x7fefdde0000",
                        "basename": "KERNELBASE.dll",
                        "filepath": "C:\\Windows\\system32\\KERNELBASE.dll",
                        "imgsize": 438272
                    },
                    {
                        "baseaddr": "0x7feffe40000",
                        "basename": "msvcrt.dll",
                        "filepath": "C:\\Windows\\system32\\msvcrt.dll",
                        "imgsize": 651264
                    },
                    {
                        "baseaddr": "0x750c0000",
                        "basename": "monitor-x64.dll",
                        "filepath": "C:\\tmpahkc3f\\bin\\monitor-x64.dll",
                        "imgsize": 2269184
                    }
                ],
                "pid": 2660,
                "ppid": 2636,
                "process_name": "rechne.exe",
                "process_path": "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.exe",
                "tid": 2664,
                "time": 0,
                "track": true,
                "type": "process"
            }
        ],
        "processtree": [
            {
                "children": [],
                "command_line": "C:\\Windows\\system32\\lsass.exe",
                "first_seen": 1646705284.4212,
                "pid": 484,
                "ppid": 368,
                "process_name": "lsass.exe",
                "track": false
            },
            {
                "children": [],
                "command_line": "\"C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.exe\" ",
                "first_seen": 1646705284.670801,
                "pid": 2660,
                "ppid": 2636,
                "process_name": "rechne.exe",
                "track": true
            }
        ],
        "summary": {
            "file_failed": [
                "C:\\Users\\analysis1\\AppData\\Local\\Temp\\rechne.ini"
            ]
        }
    },
    "debug": {
        "action": [],
        "cuckoo": [
            "2022-03-07 23:08:04,322 [cuckoo.core.scheduler] INFO: Task #47: acquired machine analysis1 (label=analysis1)\n",
            "2022-03-07 23:08:04,323 [cuckoo.core.resultserver] DEBUG: Now tracking machine 192.168.20.2 for task #47\n",
            "2022-03-07 23:08:04,323 [cuckoo.core.plugins] DEBUG: Started auxiliary module: Replay\n",
            "2022-03-07 23:08:04,360 [cuckoo.auxiliary.sniffer] INFO: Started sniffer with PID 74360 (interface=ens192, host=192.168.20.2)\n",
            "2022-03-07 23:08:04,362 [cuckoo.core.plugins] DEBUG: Started auxiliary module: Sniffer\n",
            "2022-03-07 23:08:04,918 [cuckoo.machinery.vsphere] INFO: Reverting machine analysis1 to snapshot guest_init\n",
            "2022-03-07 23:08:10,150 [cuckoo.core.guest] INFO: Starting analysis #47 on guest (id=analysis1, ip=192.168.20.2)\n",
            "2022-03-07 23:08:10,174 [cuckoo.core.guest] INFO: Guest is running Cuckoo Agent 0.10 (id=analysis1, ip=192.168.20.2)\n",
            "2022-03-07 23:08:10,262 [cuckoo.core.guest] DEBUG: Uploading analyzer to guest (id=analysis1, ip=192.168.20.2, monitor=latest, size=3884763)\n",
            "2022-03-07 23:08:10,720 [cuckoo.core.resultserver] DEBUG: Task #47: live log analysis.log initialized.\n",
            "2022-03-07 23:08:11,151 [cuckoo.core.resultserver] DEBUG: Task #47 is sending a BSON stream\n",
            "2022-03-07 23:08:11,400 [cuckoo.core.resultserver] DEBUG: Task #47 is sending a BSON stream\n",
            "2022-03-07 23:08:15,648 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:20,706 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:25,768 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:30,829 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:35,900 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:40,964 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:46,026 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:51,094 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:08:56,154 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:01,216 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:06,277 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:11,338 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:16,398 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:21,460 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:26,518 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:31,576 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:36,634 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:41,700 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:46,761 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:51,821 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:09:56,880 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:10:01,942 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:10:07,001 [cuckoo.core.guest] DEBUG: analysis1: analysis #47 still processing\n",
            "2022-03-07 23:10:12,058 [cuckoo.core.guest] INFO: analysis1: analysis completed successfully\n",
            "2022-03-07 23:10:12,078 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Replay\n",
            "2022-03-07 23:10:12,124 [cuckoo.core.plugins] DEBUG: Stopped auxiliary module: Sniffer\n",
            "2022-03-07 23:10:12,456 [cuckoo.machinery.vsphere] INFO: Powering off virtual machine analysis1\n",
            "2022-03-07 23:10:13,574 [cuckoo.core.resultserver] DEBUG: Stopped tracking machine 192.168.20.2 for task #47\n",
            "2022-03-07 23:10:13,574 [cuckoo.core.resultserver] DEBUG: Cancel <Context for LOG> for task 47L\n",
            "2022-03-07 23:10:13,604 [cuckoo.core.scheduler] DEBUG: Released database task #47\n",
            "2022-03-07 23:10:13,660 [cuckoo.core.plugins] DEBUG:"
        ],
        "dbgview": [],
        "errors": [],
        "log": [
            "2022-03-07 23:08:04,000 [analyzer] DEBUG: Starting analyzer from: C:\\tmpahkc3f\n",
            "2022-03-07 23:08:04,000 [analyzer] DEBUG: Pipe server name: \\??\\PIPE\\LilolWCIzbBEeMjCWRdl\n",
            "2022-03-07 23:08:04,000 [analyzer] DEBUG: Log pipe server name: \\??\\PIPE\\ScYgFCBPahfYtMISMVuzUJjxpEFmPSD\n",
            "2022-03-07 23:08:04,000 [analyzer] DEBUG: No analysis package specified, trying to detect it automagically.\n",
            "2022-03-07 23:08:04,000 [analyzer] INFO: Automatically selected analysis package \"exe\"\n",
            "2022-03-07 23:08:04,078 [analyzer] DEBUG: Started auxiliary module DbgView\n",
            "2022-03-07 23:08:04,312 [analyzer] DEBUG: Started auxiliary module Disguise\n",
            "2022-03-07 23:08:04,483 [analyzer] DEBUG: Loaded monitor into process with pid 484\n",
            "2022-03-07 23:08:04,483 [analyzer] DEBUG: Started auxiliary module DumpTLSMasterSecrets\n",
            "2022-03-07 23:08:04,483 [analyzer] DEBUG: Started auxiliary module Human\n",
            "2022-03-07 23:08:04,483 [analyzer] DEBUG: Started auxiliary module InstallCertificate\n",
            "2022-03-07 23:08:04,483 [analyzer] DEBUG: Started auxiliary module Reboot\n",
            "2022-03-07 23:08:04,529 [analyzer] DEBUG: Started auxiliary module RecentFiles\n",
            "2022-03-07 23:08:04,529 [modules.auxiliary.screenshots] INFO: Python Image Library (either PIL or Pillow) is not installed, screenshots are disabled.\n",
            "2022-03-07 23:08:04,529 [analyzer] DEBUG: Started auxiliary module Screenshots\n",
            "2022-03-07 23:08:04,546 [analyzer] DEBUG: Started auxiliary module LoadZer0m0n\n",
            "2022-03-07 23:08:04,592 [lib.api.process] INFO: Successfully executed process from path u'C:\\\\Users\\\\ANALYS~1\\\\AppData\\\\Local\\\\Temp\\\\rechne.exe' with arguments '' and pid 2660\n",
            "2022-03-07 23:08:04,779 [analyzer] DEBUG: Loaded monitor into process with pid 2660\n",
            "2022-03-07 23:10:05,259 [analyzer] INFO: Analysis timeout hit, terminating analysis.\n",
            "2022-03-07 23:10:05,259 [analyzer] INFO: Analysis completed.\n"
        ]
    },
    "info": {
        "added": 1646694484.0,
        "category": "file",
        "custom": "",
        "duration": 130,
        "ended": 1646694614.0,
        "git": {
            "fetch_head": "13cbe0d9e457be3673304533043e992ead1ea9b2",
            "head": "13cbe0d9e457be3673304533043e992ead1ea9b2"
        },
        "id": 47,
        "machine": {
            "label": "analysis1",
            "manager": "vSphere",
            "name": "analysis1",
            "shutdown_on": "2022-03-07 23:10:14",
            "started_on": "2022-03-07 23:08:05",
            "status": "stopped"
        },
        "monitor": "2deb9ccd75d5a7a3fe05b2625b03a8639d6ee36b",
        "options": "",
        "owner": "",
        "package": "",
        "platform": "",
        "route": "none",
        "score": 0.0,
        "started": 1646694484.0,
        "version": "2.0.7"
    },
    "metadata": {
        "output": {
            "pcap": {
                "basename": "dump.pcap",
                "dirname": "",
                "sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea"
            }
        }
    },
    "network": {
        "dead_hosts": [],
        "dns": [],
        "dns_servers": [],
        "domains": [],
        "hosts": [],
        "http": [],
        "http_ex": [],
        "https_ex": [],
        "icmp": [],
        "irc": [],
        "mitm": [],
        "pcap_sha256": "704e5e5b3234433c01fcfd1b20a306e77e985038120492dc53965c3edd38a4ea",
        "smtp": [],
        "smtp_ex": [],
        "tcp": [],
        "tls": [],
        "udp": []
    },
    "signatures": [],
    "static": {
        "imported_dll_count": 2,
        "keys": [],
        "pdb_path": null,
        "pe_exports": [
            {
                "address": "0x40efa0",
                "name": "Java_de_jsteltze_io_NativeInputStream_close",
                "ordinal": 1
            },
            {
                "address": "0x40ede0",
                "name": "Java_de_jsteltze_io_NativeInputStream_init",
                "ordinal": 2
            },
            {
                "address": "0x40ef20",
                "name": "Java_de_jsteltze_io_NativeInputStream_read",
                "ordinal": 3
            },
            {
                "address": "0x40ec90",
                "name": "Java_de_jsteltze_rechne_Rechne_rechne",
                "ordinal": 4
            },
            {
                "address": "0x40ec40",
                "name": "Java_de_jsteltze_rechne_Rechne_version",
                "ordinal": 5
            }
        ],
        "pe_imphash": "c26066c9b1748a4cec4ca4602a8b090e",
        "pe_imports": [
            {
                "dll": "KERNEL32.dll",
                "imports": [
                    {
                        "address": "0x447324",
                        "name": "DeleteCriticalSection"
                    },
                    {
                        "address": "0x44732c",
                        "name": "EnterCriticalSection"
                    },
                    {
                        "address": "0x447334",
                        "name": "GetCurrentProcess"
                    },
                    {
                        "address": "0x44733c",
                        "name": "GetCurrentProcessId"
                    },
                    {
                        "address": "0x447344",
                        "name": "GetCurrentThreadId"
                    },
                    {
                        "address": "0x44734c",
                        "name": "GetLastError"
                    },
                    {
                        "address": "0x447354",
                        "name": "GetStartupInfoA"
                    },
                    {
                        "address": "0x44735c",
                        "name": "GetSystemTimeAsFileTime"
                    },
                    {
                        "address": "0x447364",
                        "name": "GetTickCount"
                    },
                    {
                        "address": "0x44736c",
                        "name": "InitializeCriticalSection"
                    },
                    {
                        "address": "0x447374",
                        "name": "LeaveCriticalSection"
                    },
                    {
                        "address": "0x44737c",
                        "name": "QueryPerformanceCounter"
                    },
                    {
                        "address": "0x447384",
                        "name": "RtlAddFunctionTable"
                    },
                    {
                        "address": "0x44738c",
                        "name": "RtlCaptureContext"
                    },
                    {
                        "address": "0x447394",
                        "name": "RtlLookupFunctionEntry"
                    },
                    {
                        "address": "0x44739c",
                        "name": "RtlVirtualUnwind"
                    },
                    {
                        "address": "0x4473a4",
                        "name": "SetUnhandledExceptionFilter"
                    },
                    {
                        "address": "0x4473ac",
                        "name": "Sleep"
                    },
                    {
                        "address": "0x4473b4",
                        "name": "TerminateProcess"
                    },
                    {
                        "address": "0x4473bc",
                        "name": "TlsGetValue"
                    },
                    {
                        "address": "0x4473c4",
                        "name": "UnhandledExceptionFilter"
                    },
                    {
                        "address": "0x4473cc",
                        "name": "VirtualProtect"
                    },
                    {
                        "address": "0x4473d4",
                        "name": "VirtualQuery"
                    }
                ]
            },
            {
                "dll": "msvcrt.dll",
                "imports": [
                    {
                        "address": "0x4473e4",
                        "name": "__C_specific_handler"
                    },
                    {
                        "address": "0x4473ec",
                        "name": "__argv"
                    },
                    {
                        "address": "0x4473f4",
                        "name": "__getmainargs"
                    },
                    {
                        "address": "0x4473fc",
                        "name": "__initenv"
                    },
                    {
                        "address": "0x447404",
                        "name": "__iob_func"
                    },
                    {
                        "address": "0x44740c",
                        "name": "__lconv_init"
                    },
                    {
                        "address": "0x447414",
                        "name": "__set_app_type"
                    },
                    {
                        "address": "0x44741c",
                        "name": "__setusermatherr"
                    },
                    {
                        "address": "0x447424",
                        "name": "_acmdln"
                    },
                    {
                        "address": "0x44742c",
                        "name": "_amsg_exit"
                    },
                    {
                        "address": "0x447434",
                        "name": "_cexit"
                    },
                    {
                        "address": "0x44743c",
                        "name": "_close"
                    },
                    {
                        "address": "0x447444",
                        "name": "_errno"
                    },
                    {
                        "address": "0x44744c",
                        "name": "_fdopen"
                    },
                    {
                        "address": "0x447454",
                        "name": "_fmode"
                    },
                    {
                        "address": "0x44745c",
                        "name": "_initterm"
                    },
                    {
                        "address": "0x447464",
                        "name": "_onexit"
                    },
                    {
                        "address": "0x44746c",
                        "name": "_pipe"
                    },
                    {
                        "address": "0x447474",
                        "name": "_read"
                    },
                    {
                        "address": "0x44747c",
                        "name": "_time64"
                    },
                    {
                        "address": "0x447484",
                        "name": "_unlink"
                    },
                    {
                        "address": "0x44748c",
                        "name": "_vsnprintf"
                    },
                    {
                        "address": "0x447494",
                        "name": "abort"
                    },
                    {
                        "address": "0x44749c",
                        "name": "acos"
                    },
                    {
                        "address": "0x4474a4",
                        "name": "asin"
                    },
                    {
                        "address": "0x4474ac",
                        "name": "atan"
                    },
                    {
                        "address": "0x4474b4",
                        "name": "calloc"
                    },
                    {
                        "address": "0x4474bc",
                        "name": "clock"
                    },
                    {
                        "address": "0x4474c4",
                        "name": "cosh"
                    },
                    {
                        "address": "0x4474cc",
                        "name": "exit"
                    },
                    {
                        "address": "0x4474d4",
                        "name": "fclose"
                    },
                    {
                        "address": "0x4474dc",
                        "name": "fgetc"
                    },
                    {
                        "address": "0x4474e4",
                        "name": "fgets"
                    },
                    {
                        "address": "0x4474ec",
                        "name": "fopen"
                    },
                    {
                        "address": "0x4474f4",
                        "name": "fprintf"
                    },
                    {
                        "address": "0x4474fc",
                        "name": "fputc"
                    },
                    {
                        "address": "0x447504",
                        "name": "free"
                    },
                    {
                        "address": "0x44750c",
                        "name": "freopen"
                    },
                    {
                        "address": "0x447514",
                        "name": "fseek"
                    },
                    {
                        "address": "0x44751c",
                        "name": "ftell"
                    },
                    {
                        "address": "0x447524",
                        "name": "fwrite"
                    },
                    {
                        "address": "0x44752c",
                        "name": "getc"
                    },
                    {
                        "address": "0x447534",
                        "name": "getenv"
                    },
                    {
                        "address": "0x44753c",
                        "name": "isprint"
                    },
                    {
                        "address": "0x447544",
                        "name": "malloc"
                    },
                    {
                        "address": "0x44754c",
                        "name": "memcpy"
                    },
                    {
                        "address": "0x447554",
                        "name": "memmove"
                    },
                    {
                        "address": "0x44755c",
                        "name": "memset"
                    },
                    {
                        "address": "0x447564",
                        "name": "printf"
                    },
                    {
                        "address": "0x44756c",
                        "name": "putchar"
                    },
                    {
                        "address": "0x447574",
                        "name": "puts"
                    },
                    {
                        "address": "0x44757c",
                        "name": "rand"
                    },
                    {
                        "address": "0x447584",
                        "name": "realloc"
                    },
                    {
                        "address": "0x44758c",
                        "name": "rewind"
                    },
                    {
                        "address": "0x447594",
                        "name": "setvbuf"
                    },
                    {
                        "address": "0x44759c",
                        "name": "signal"
                    },
                    {
                        "address": "0x4475a4",
                        "name": "sinh"
                    },
                    {
                        "address": "0x4475ac",
                        "name": "srand"
                    },
                    {
                        "address": "0x4475b4",
                        "name": "sscanf"
                    },
                    {
                        "address": "0x4475bc",
                        "name": "strchr"
                    },
                    {
                        "address": "0x4475c4",
                        "name": "strcmp"
                    },
                    {
                        "address": "0x4475cc",
                        "name": "strcpy"
                    },
                    {
                        "address": "0x4475d4",
                        "name": "strlen"
                    },
                    {
                        "address": "0x4475dc",
                        "name": "strncmp"
                    },
                    {
                        "address": "0x4475e4",
                        "name": "strstr"
                    },
                    {
                        "address": "0x4475ec",
                        "name": "system"
                    },
                    {
                        "address": "0x4475f4",
                        "name": "tan"
                    },
                    {
                        "address": "0x4475fc",
                        "name": "vfprintf"
                    }
                ]
            }
        ],
        "pe_resources": [],
        "pe_sections": [
            {
                "entropy": 6.3529951708192245,
                "name": ".text",
                "size_of_data": "0x00029800",
                "virtual_address": "0x00001000",
                "virtual_size": "0x000296c8"
            },
            {
                "entropy": 4.184982225230327,
                "name": ".data",
                "size_of_data": "0x00001000",
                "virtual_address": "0x0002b000",
                "virtual_size": "0x00000e30"
            },
            {
                "entropy": 5.1640343739005985,
                "name": ".rdata",
                "size_of_data": "0x00014a00",
                "virtual_address": "0x0002c000",
                "virtual_size": "0x000149d0"
            },
            {
                "entropy": 5.21321510613288,
                "name": ".pdata",
                "size_of_data": "0x00000e00",
                "virtual_address": "0x00041000",
                "virtual_size": "0x00000d8c"
            },
            {
                "entropy": 4.656097550138795,
                "name": ".xdata",
                "size_of_data": "0x00001400",
                "virtual_address": "0x00042000",
                "virtual_size": "0x00001220"
            },
            {
                "entropy": 0.0,
                "name": ".bss",
                "size_of_data": "0x00000000",
                "virtual_address": "0x00044000",
                "virtual_size": "0x00001cc4"
            },
            {
                "entropy": 3.4198824824684335,
                "name": ".edata",
                "size_of_data": "0x00000200",
                "virtual_address": "0x00046000",
                "virtual_size": "0x00000134"
            },
            {
                "entropy": 3.8038482943238057,
                "name": ".idata",
                "size_of_data": "0x00000e00",
                "virtual_address": "0x00047000",
                "virtual_size": "0x00000c34"
            },
            {
                "entropy": 0.2397656363955928,
                "name": ".CRT",
                "size_of_data": "0x00000200",
                "virtual_address": "0x00048000",
                "virtual_size": "0x00000068"
            },
            {
                "entropy": 0.0,
                "name": ".tls",
                "size_of_data": "0x00000200",
                "virtual_address": "0x00049000",
                "virtual_size": "0x00000010"
            },
            {
                "entropy": 4.964676405219912,
                "name": ".reloc",
                "size_of_data": "0x00000400",
                "virtual_address": "0x0004a000",
                "virtual_size": "0x00000390"
            },
            {
                "entropy": 0.2162069074398449,
                "name": "/4",
                "size_of_data": "0x00000200",
                "virtual_address": "0x0004b000",
                "virtual_size": "0x00000050"
            },
            {
                "entropy": 5.823876775722893,
                "name": "/19",
                "size_of_data": "0x00002000",
                "virtual_address": "0x0004c000",
                "virtual_size": "0x00001f08"
            },
            {
                "entropy": 3.2872917906726884,
                "name": "/31",
                "size_of_data": "0x00000200",
                "virtual_address": "0x0004e000",
                "virtual_size": "0x00000149"
            },
            {
                "entropy": 3.2275057452892155,
                "name": "/45",
                "size_of_data": "0x00000400",
                "virtual_address": "0x0004f000",
                "virtual_size": "0x00000222"
            },
            {
                "entropy": 0.6931503241542495,
                "name": "/57",
                "size_of_data": "0x00000200",
                "virtual_address": "0x00050000",
                "virtual_size": "0x00000048"
            },
            {
                "entropy": 2.3096290657464,
                "name": "/70",
                "size_of_data": "0x00000200",
                "virtual_address": "0x00051000",
                "virtual_size": "0x0000009b"
            }
        ],
        "pe_timestamp": "2020-10-16 04:00:32",
        "pe_versioninfo": [],
        "peid_signatures": null,
        "signature": []
    },
    "strings": [
        "!This program cannot be run in DOS mode.",
        "P`.data",
        ".rdata",
        "`@.pdata",
        "0@.xdata",
        "0@.bss",
        ".edata",
        "0@.idata",
        ".reloc",
        "8MZtXH",
        "AUATUWVSH",
        "[^_]A\\A]",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "zTuRHc",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "p0...15",
        "i2...62",
        "o2...62",
        "variable",
        "L;T$xr",
        "L;T$xD",
        "H;D$xB",
        "L9d$xD",
        "D9d$pw",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "rechne.mH",
        "anpage.oH",
        "rechne.m",
        "anpage.o",
        "ATUWVSH",
        " [^_]A\\",
        "z=u;fA",
        "AUATUWVSH",
        "[^_]A\\A]",
        "AVAUATUWVSH",
        "`[^_]A\\A]A^",
        "ATUWVSH",
        " [^_]A\\",
        "AWAVAUATUWVSH",
        "h[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        ")t$ E1",
        "8[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AUATUWVSH",
        "[^_]A\\A]",
        "AUATUWVSH",
        "8[^_]A\\A]",
        "8[^_]A\\A]",
        "8[^_]A\\A]",
        "8[^_]A\\A]",
        "8[^_]A\\A]",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "rechne.e",
        "[^_]A\\A]A^A_",
        "rechne.e",
        "AWAVAUATUWVSH",
        "8[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "L$8}#H",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AVAUATUWVSH",
        "P[^_]A\\A]A^",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "function",
        "ATUWVSH",
        " [^_]A\\",
        "AWAVAUATUWVSH",
        "X[^_]A\\A]A^A_",
        "AUATUWVSH",
        "H[^_]A\\A]",
        "H[^_]A\\A]",
        "ATUWVSH",
        "0[^_]A\\",
        "AWAVAUATUWVSH",
        "([^_]A\\A]A^A_",
        "([^_]A\\A]A^A_",
        "T$XtzH",
        "ATUWVSH",
        "[^_]A\\",
        "[^_]A\\",
        "[^_]A\\",
        "ATUWVSH",
        " [^_]A\\",
        " [^_]A\\",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AUATUWVSH",
        "([^_]A\\A]",
        "([^_]A\\A]",
        "AVAUATUWVSH",
        " [^_]A\\A]A^",
        "ATUWVSH",
        " [^_]A\\",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "f1...100",
        "l1...100A",
        "HcD$pH",
        "variable",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "rechne.mH",
        "anpage.oH",
        "AVAUATUWVSH",
        " [^_]A\\A]A^",
        "ATUWVSH",
        "P[^_]A\\",
        "P[^_]A\\",
        "AUATUWVSH",
        "([^_]A\\A]",
        "division",
        "([^_]A\\A]",
        "([^_]A\\A]",
        "([^_]A\\A]",
        "ATUWVSH",
        " [^_]A\\",
        " [^_]A\\",
        " [^_]A\\",
        "AUATUWVSH",
        "H[^_]A\\A]",
        "exponent",
        "H[^_]A\\A]",
        "AVAUATUWVSH",
        "@[^_]A\\A]A^",
        "exponent",
        "@[^_]A\\A]A^",
        "@[^_]A\\A]A^",
        "AUATUWVSH",
        "H[^_]A\\A]",
        "H[^_]A\\A]",
        "AVAUATUWVSH",
        "@[^_]A\\A]A^",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "X[^_]A\\A]A^A_",
        ")|$ fD",
        ")T$`fE",
        "~\\$ fA",
        "X|$8fA",
        "X|$8fA",
        "ATUWVSH",
        "[^_]A\\",
        "ATUWVSH",
        "D$0UVWXH",
        "CDEFGHJK",
        "LMNPQRSTH",
        "[^_]A\\",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "AWAVAUATUWVSH",
        "[^_]A\\A]A^A_",
        "ATUWVSH",
        "[^_]A\\",
        "rechne.mH",
        "anpage.oH",
        "[^_]A\\",
        "XL$@fD",
        "XL$@fD",
        "AUATUWVSH",
        "[^_]A\\A]",
        "AUATUWVSH",
        "[^_]A\\A]",
        "AWAVAUATUWVSH",
        ")l$@fE",
        ")d$@fA",
        "[^_]A\\A]A^A_",
        "ATUWVSH",
        "0[^_]A\\",
        "H3t$(D",
        "0[^_]A\\",
        "ATUWVSH",
        "P[^_]A\\",
        "UAWAVAUATWVSH",
        "[^_A\\A]A^A_]",
        "ATUWVSH",
        " [^_]A\\",
        "([^_]H",
        ":MZu]H",
        "tQHcJ<H",
        "tKIc@<H",
        "tFIcH<L",
        "tLIcC<L",
        ")t$@fH",
        "AUATUWVS",
        "[^_]A\\A]",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        "HcD$<H",
        "AWAVAUATUWVSH",
        "H[^_]A\\A]A^A_",
        ")t$`fH",
        ")t$`fH",
        "ATUWVSH",
        "[^_]A\\",
        ")t$`fH",
        "AWAVAUATUWVSH",
        "8[^_]A\\A]A^A_",
        "rechne.exe ist ein saugeiles Programm!                                                                                                                                                                                                                         ",
        "OkqgQ&4GrWv0",
        "\\=|+Jp",
        "TRUE (1)",
        "FALSE (0)",
        "*10^%s",
        "^(1/2)",
        "-> number of factors: ",
        "factor(",
        "Result",
        "Result (complex)",
        "--- %s: start processing ---",
        "--- %s: get args: %d: %s",
        "--- %s: file redirect to: \"%s\"",
        "--version",
        "--help",
        "--- %s: system('cls') returns %d",
        "trainer",
        "define",
        "defines",
        "--- %s: getopt: c=%c optind=%d",
        "i:o:p:qvy",
        "--- %s: after getopt: optind=%d (argc=%d)",
        "--- %s: PARAMETER: verbosity=%u precision=%d -i=%u -o=%u",
        "--- %s: recognize as number: %s",
        "%s -> ",
        "--- %s: add number '%f'",
        "--- %s: add bracket '('",
        "--- %s: add bracket ')'",
        "--- %s: add imaginary number '%s'",
        "--- %s: add zero automatically",
        "--- %s: add ANS '%f' automatically",
        "--- %s: add operand '%s'",
        "--- %s: add function '%s'",
        "--- %s: have %d args",
        "--- %s: arg[%d]: \"%s\"",
        "--- %s: substitute=\"%s\"",
        "--- %s: unexpected symbol at pos %d (%d)",
        "--- %s: __errno: %d",
        "--- %s: NUMBER[%d]: %f-%f",
        "--- %s: OPERAND[%d]: %d",
        "--- %s: input string was: \"%s\"",
        "--- %s: calculated result: %f+%fi",
        "--- %s: calculation request with %d to %d",
        "main_routine",
        "factor",
        "rechne.manpage.out",
        "                                rechne.exe 3.1                           10/2020",
        "--------------------------------------------------------------------------------",
        "rechne.exe can solve mathematical terms without unknown variables.",
        "Example: Calculating the volume of a spherical calotte with height 5 and diameter 17.2 with printing all intermediate steps:",
        "rechne -v Pi*5",
        "/3*(3*17.2/2-5)",
        "Note: There must be no spaces within the term. Spaces serve for separating options and arguments.",
        "Supported functions and operations:",
        "%28s: %s",
        "|%28s: %s",
        "Available constants:",
        "rechne",
        "For more information on a particular function: \"%s <function> -?\"",
        "E.g.: \"%s sqrt ?\"",
        "Saving results:",
        "Example:  \"rechne -v var=12*8.2\"",
        "          \"rechne -v sqrt(var)*var\"",
        "rechne.exe allows for saving results in variables. Using the variables name this results can be used in all following calculations.",
        "The syntax is \"rechne [name]=[term]\". Variables will be saved for the duration of a single rechne.exe session only.",
        "If certain variables shall be saved permanently the assignment has to be put into the ini-file to be loaded at the beginnig of every rechne.exe session.",
        "Redirecting outputs to files:",
        "Example: \"rechne -v 4*9 >> output.txt\"",
        "In this example all normal outputs (stdout) are written to the file 'output.txt'. Error messages and warnings (stderr) still get printed to the console. '>>' means appending where '>' means truncating. The file path can be absolute or relative.",
        "To suppress any outputs redirecting to /dev/null can be used (on Windows: NUL).",
        "Complex numbers:",
        "Example: \"rechne -v sqrt(3+4*i)\"",
        "rechne.exe can handle complex numbers. The imaginary unit is 'i' and is defined as sqrt(-1). However not all functions/operations are defined on complex numbers. For more information about the domain of a particular function see the manual page of this function.",
        "Comparisons:",
        "Example: \"rechne -v 3*5==15\"",
        "By use of the operands '==', '>', '<', '>=' and '<=' numbers can be compared. Comparisons are executed lastly (after + and -). A fulfilled comparison returns 1 (TRUE) where a false statement returns 0 (FALSE). Comparing complex numbers means comparing the absolute values (magnitudes) of these numbers.",
        "rechne.ini:",
        "If a file \"rechne.ini\" exists, on starting rechne.exe reads that file and executes each line. Especially the 'set' und 'define' are suitable for the ini-file. This will set options (see \"set ?\") and own functions (see \"define ?\") on every start. Constants, too, (notation [name]=[term]) can be put here to make them accessible in every rechne.exe session.",
        "Big number mode:",
        "rechne.exe supports calculations with very large integers. This mode operates fundamentally different from the default mode. By \"rechne bn\" the big number mode gets entered. Then the prompt 'rechne@bn' appears. For more information hit '?' in the big number mode.",
        "Geo mode:",
        "rechne.exe can calculate with geo coordinates (conversion, distance, bearing). By \"rechne geo\" the geo mode gets entered. Then the prompt 'rechne@geo' appears. For more information hit '?' in the geo mode.",
        "--------------------------------------------------------------------------------",
        "Johannes Steltzer, 10/2020",
        "https://rechne-exe.sourceforge.io",
        "... returns the remainder of the division of an integer over a natural number. The result is always a natural number (inc. 0). Modular functions play an important role in computer science. They are used in many algorithms and cryptographic functions. The syntax is 'x%y' or 'xmody'.",
        " Examples: 62%%13= 10",
        "           (34+3",
        ")%%11= 10",
        "           15mod5= 0",
        "... of a natural number returns the product of all natural numbers less than or equal to this number. Factorials are widely used in combinatorics and mathematical series. For example a permutation with n elements equals the factorial of n.",
        "The syntax is 'x!'. Increasing x, the factorial of x quickly takes very large values. That is why in rechne.exe the factorial is limited for 0<=x<=170.",
        "The factorial can be described by a product function. 'x!' equals 'prd(k,1,x,k)'.",
        " Examples: 3!= 6",
        "           (2+4)!= 720",
        "           3",
        "!= 362880",
        "For arbitrary bases and arbitrary exponents '^' is to use for raising. The syntax is 'x^y' (speak: raise x to the power of y). If the base is negative and the exponent is fractional, the result will be complex. For fractional exponents raising euqals root extraction. Root extraction and logarithm are the inverse functions of raising. For the second and the third power, '",
        "' and '",
        "' can be used.",
        " Examples: 2^(-2)= 0.25",
        "           (-5)^2= 25",
        "           (1/7)^(3-8)= 16807",
        "           (2+3*i)^i= (0.1064195687+0.3588153454*i)",
        "... is one of the inverse functions of raising, searching for the base. The xth root of y means \"What base is to raise to the power of x to get y?\". For arbitrary x and y 'rt' is to use where x is the order of the root and y is the radicand. The synatx is 'xrty'.",
        "'xrty' equals 'x^(1/y)'. The root for y<0 is complex. x may also be negative (use brackets!): '(-x)rty' equals '1/xrty'. Beside raising, the logarithm is the second inverse function of root extraction. For the often used second root (square root) 'sqrt' can be used (syntax: 'sqrtx').",
        " Examples: 2rt9= 3",
        "           (-3)rt64= 0.25",
        "           (15/3)rt(sin(Pi/2))= 1",
        "           sqrt(2^3^4)= 64",
        "           sqrt(3+4*i)= (2+i)",
        "Numbers in scientific calculations are often very large or very small. The mass of an electron is in areas of 10^-31 where the speed of light is 3*10^8. Using 'E' is a convenient way of handling such numbers. 'E' is a macro for '*10^' so 'xEy' equals 'x*10^y' and all it does is to shift the decimal point of x by y places to the right (if y is positive) or to the left (is y is negative). Negative exponents do not need brackets.",
        "If no '-p' option is used, by default rechne.exe outputs small or large numbers by the use of 'E'.",
        " Examples: 2.8E-6= 0.0000028",
        "           4*.8E9= 3.200000E+009",
        "           (1/7)E(3-8)= 0.0000014286",
        "... is beside root extraction the second inverse function of raising, searching for the exponent. The logarithm of y to the base x means: \"What power is x to raise with to get y?\". The syntax is 'log(x,y)' (speak: logarithm of y to the base x). Arguments y<0 or bases x<0 will result in complex logarithms. On x=0 or y=0 the logarithm is undefined.",
        "Special logarithms are:     'ln' (base e)   see \"rechne ln ?\"",
        "                            'ld' (base 2)   see \"rechne ld ?\"",
        "                            'lg' (base 10)  see \"rechne lg ?\"",
        "If y=1 the logarithm is always 0. If x=y the logarithm is always 1.",
        " Examples: log(3,27)= 3",
        "           log(4,64)= 3",
        "           log(2+3,e^(3/7))= 0.2662864005",
        "           log(2+3*i,5*e^(Pi/2*i))= (1.3819803346+0.1657691429*i)",
        "... has the Euler number e (see \"rechne e ?\") as fixed base. As the inverse function of the e-function the natural logarithm is widely used in mathematics and science. The syntax is 'lnx'.",
        " Examples: lne= 1",
        "           ln(ln(e^4))= 1.3862943611",
        "           ln1= 0",
        "           ln(3*e^(4*i))= (1.0986122887+4*i)",
        "... (also common logarithm) has 10 as fixed base and is used in mathematics and various engineering fields. Wide-ranging functions often get applied to logarithmic scales for purposes of plotting. The syntax is 'lgx'.",
        " Examples: lg10= 1",
        "           lg100= 2",
        "           lg(2+e)= 0.6737838782",
        "           lgi= (0.6821881769*i)",
        "... has 2 as fixed base and is therefore often used in computer science and information theory (binary numbers base on 2). The syntax is 'ldx'.",
        " Examples: ld2= 1",
        "           ld8= 3",
        "           ld(5-4)= 0",
        "           ld(2+i)= (1.1609640474+0.6689021062*i)",
        "... returns the quotient of the product of two numbers over their sum. For example in electrical engineering this is how to calculate the resulting value of two parallel resistors or inductors. The result is always smaller than the smallest of both numbers. The syntax is 'x//y' which equals to 'x*y/(x+y)'.",
        " Examples: 3//5= 1.875",
        "           100//100= 50",
        "           (70+150)//200= 104.7619047619",
        "           (2+3*i)//(5*e^(-Pi/2*i))= (6.25+1.25*i)",
        "... has an important role in combinatorics. The syntax is 'binom(n,k)'. n can be complex. k must be natural (inc. 0). 'binom(n,k)' equals to 'prd(j,1,k,(n+1-j)/j)'. If n is natural, too, this formula can be refactored to 'n!/(k!*(n-k)!)'.",
        "In combinatorics there are 'binom(n,k)' ways to choose k elements from a set of n elements (without repetitions). Allowing repetition results in 'binom(n+k-1,k)' ways.",
        " Examples: binom(8,5)= 56",
        "           binom(2*3,5)*2= 12",
        "           binom(3*i,2)= -4.5-1.5*i",
        "... (also cardinal sine) is defined by '(sinx)/x' and used in mathematics and system theory. The syntax is 'six'. At 0 'six' is undefined but tends to 1. In positive and negative infinity 'six' tends to 0.",
        " Examples: si5= -0.1917848549",
        "           si(1E-2)= 0.9999833334",
        "           si(Pi/2)= 0.6366197724",
        "           si(2+3*i)= (0.4463290318-2.7539470277*i)",
        "... (lat. arc, bow) of an angle in a right triangle gives the ratio of the length of the side opposite to the length of the hypotenuse. The angle can be given in radians (syntax: 'sinx') or in degrees (syntax: 'sin",
        "The sine has a period of 2*Pi. 360",
        " correlates with 2*Pi (full circle) and every angle between correlates with the length of the corresponding circular arc. For 'sinx' the argument x can be complex (but not for 'sin",
        " Examples: sin(Pi/2)= 1",
        "           sin",
        "           sin0= 0",
        "           sin(2*e^(Pi/2*i))= (3.6268604078*i)",
        "... (from complementary sine or sine of the co-angle) of an angle in a right triangle gives the ratio of the length of the adjacent side to the length of the hypotenuse. The angle can be given in radians (syntax: 'cosx') or in degrees (syntax: 'cos",
        "The cosine has a period of 2*Pi. 360",
        " correlates with 2*Pi (full circle) and every angle between correlates with the length of the corresponding circular arc. For 'cosx' the argument x can be complex (but not for 'cos",
        " Examples: cos(Pi/2)= 0",
        "           cos",
        "180= -1",
        "           cos0= 1",
        "           cos(2+3*i)= (-4.189625691-9.1092278938*i)",
        "... (lat. touching line) of an angle in a right triangle gives the ratio of the length of the side opposite to the length adjacent side. The angle can be given in radians (syntax: 'tanx') or in degrees (syntax: 'tan",
        "The tangent has a period of Pi. 'tanx' equals 'sinx/cosx'. For every integer k the tangent of (2*k+1)*90",
        " or (2*k+1)*Pi/2 is undefined. 360",
        " correlates with 2*Pi (full circle) and every angle between correlates with the length of the corresponding circular arc. For 'tanx' the argument x can be complex (but not for 'tan",
        " Examples: tan",
        "           tan",
        "(-45)= -1",
        "           tanPi= 0",
        "           tan(5*i)= (0.9999092043*i)",
        "... (lat. cutting line) is the reciprocal of the cosine. So the secant of an angle in a right triangle gives the ratio of the length of the hypotenuse to the length of th adjacent side. The angle can be given in radians (syntax: 'secx') or in degrees (syntax: 'sec",
        "'secx' equals '1/cosx'. So 'secx' is undefined where 'cosx' returns 0 (which is (2*k+1)*90",
        " or (2*k+1)*Pi/2 for every integer k). For 'secx' the argument x can be complex (but not for 'sec",
        " Examples: sec",
        "180= -1",
        "           sec",
        "(-60)= 2",
        "           sec(Pi/4)= 1.4142135624",
        "... is the reciprocal of the sine. So the cosecant of an angle in a right triangle gives the ratio of the length of the hypotenuse to the length of the opposite side. The angle can be given in radians (syntax: 'cscx') or in degrees (syntax: 'csc",
        "'cscx' equals '1/sinx'. So 'cscx' is undefined where 'sinx' returns 0 (which is k*180",
        " or k*Pi for every integer k). For 'cscx' the argument x can be complex (but not for 'csc",
        " Examples: csc",
        "           csc",
        "(-30)= -2",
        "           csc(Pi*.7)= 1.2360679775",
        "... is the reciprocal of the tangent. So the cotangent of an angle in a right triangle gives the ratio of the length of the adjacent side to the length of the opposite side. The angle can be given in radians (syntax: 'cotx') or in degrees (syntax: 'cot",
        "'cotx' equals '1/tanx' equals 'cosx/sinx'. So 'cotx' is undefined where 'tanx' and 'sinx' return 0 (which is k*180",
        " or k*Pi for every integer k). As the tangent the cotangent has a period of Pi. For 'cotx' the argument x can be complex (but not for 'cot",
        " Examples: cot",
        "           cot",
        "(-45)= -1",
        "           cot(Pi/2)= 0",
        "           coti= (-1.3130352855*i)",
        "... is the inverse function of the sine. For -Pi/2 through Pi/2 the sine is one-to-one so inverting gets restricted to this interval. The syntax is 'asinx'. Using the arcsine means: \"What angle gives x as the ratio of the length of the opposite side to the length of the hypotenuse in a right triangle?\".",
        "For real numbers 'asinx' is defined for -1<=x<=1 only and returns an angle between -Pi/2 and Pi/2. For |x|>1 or complex x 'asinx' gives complex numbers.",
        " Examples: asin(-1)= -1.5707963268",
        "           asin(1/2rt2)= 0.7853981634",
        "           asin0= 0",
        "           asin2= (1.5707963268+1.3169578969*i)",
        "... is the inverse function of the cosine. For 0 through Pi the cosine is one-to-one so inverting gets restricted to this interval. The syntax is 'acosx'. Using the arccosine means: \"What angle gives x as the ratio of the length of the adjacent side to the length of the hypotenuse in a right triangle?\".",
        "For real numbers 'acosx' is defined for -1<=x<=1 only and returns an angle between 0 and Pi. For |x|>1 or complex x 'acosx' gives complex numbers.",
        " Examples: acos(-1)= 3.1415926536",
        "           acos(1/2rt2)= 0.7853981634",
        "           acos0= 1.5707963268",
        "           acos2= (1.3169578969*i)",
        "... is the inverse function of the tangent. For -Pi/2 through Pi/2 the tangent is one-to-one so inverting gets restricted to this interval. The syntax is 'atanx'. Using the arctangent means: \"What angle gives x as the ratio of the lenght of the opposite side to the length of the adjacent side in a right triangle?\".",
        "'atanx' is defined for all real numbers. If x is very large 'atanx' tends to Pi/2 and to -Pi/2 if x goes to negative infinity. For complex x 'atanx' gives complex numbers.",
        " Examples: atan(-800*900)= -1.5707949379",
        "           atan1= 0.7853981634",
        "           atan0= 0",
        "           atan(2+i)= (1.1780972451+0.1732867951*i)",
        "... is the inverse function of the secant. For 0 through Pi the secant is one-to-one so inverting gets restricted to this interval. The syntax is 'asecx'. The arcsecant tends to Pi/2 on both sites of infinity. 'asecx' is undefined for x=0. The result is an angle between 0 and Pi.",
        "'asecx' equals to 'acos(1/x)'.",
        " Examples: asec(-1)= 3.1415926536",
        "           asec.5= (-1.3169578969*i)",
        "           asec(10!)= 1.5707960512",
        "... is the inverse function of the cosecant. For -Pi/2 through Pi/2 the cosecant is one-to-one so inverting gets restricted to this interval. The syntax is 'acscx'. The arccosecant tends to 0 on both sites of infinity. 'acscx' is undefined for x=0. The result is an angle between -Pi/2 and Pi/2.",
        "'acscx' equals to 'asin(1/x)'.",
        " Examples: acsc(-1)= -1.5707963268",
        "           acsc.5= (1.5707963268+1.3169578969*i)",
        "           acsc(10!)= 2.755708E-007",
        "... is the inverse function of the cotangent. For 0 through Pi the cotangent is one-to-one so inverting gets restricted to this interval. The syntax is 'acotx'. The domain is unlimited for all complex numbers. 'acotx' tends to Pi for very large, negative x and to 0 for large positive x.",
        "The result is an angle between 0 and Pi. 'acotx' equals to 'Pi/2-atanx'.",
        " Examples: acot0= 1.5707963268",
        "           acot1= 0.7853981634",
        "           acot(-99^5)= 3.1415926535",
        "           acot(2*i)= (0.5493061443*i)",
        "... is a monotonically increasing function which can be described by the two asymptotes e^x/2 and -e^(-x)/2. The syntax is 'sinhx'. Domain and codomain are unlimited for all complex numbers. 'sinhx' equals to '(-i)*sin(i*x)' with i as the imaginary unit.",
        " Examples: sinh0= 0",
        "           sinhe= 7.5441371028",
        "           sinh(ln((1+2rt5)/2))= 0.5",
        "           sinhi= (0.8414709848*i)",
        "... has a special role in nature. A chain between two points always forms a curve which can be described by  the hyperbolic cosine. The domain is unlimited for all complex numbers. The syntax is 'coshx'. For real numbers 'coshx' gives a value >=1.",
        "'coshx' can be described by the two asymptotes e^x/2 and e^(-x)/2 and equals to 'cos(i*x)' with i as the imaginary unit.",
        " Examples: cosh0= 1",
        "           cosh(2rt2)= 2.1781835566",
        "           cosh(-80)= 2.770311E+034",
        "           cosh(3+4*i)= (-6.5806630406-7.5815527427*i)",
        "... is defined by 'sinhx/coshx'. This term can be refactored to '1-2/(e^(2*x)+1)'. The domain is unlimited for all complex numbers. The syntax is 'tanhx'. For x running to positive infinity 'tanhx' tends to 1 and to -1 for x running to negative infinity. As 'sinhx' 'tanhx' is monotonically increasing.",
        " Examples: tanh0= 0",
        "           tanh(10)= 0.9999999959",
        "           tanh(-1/2rt2)= -0.608859365",
        "           tanh(4*i)= (1.1578212823*i)",
        "... is defined by '1/tanhx' which is also 'coshx/sinhx'. This term can be refactored to '1+2/(e^(2*x)-1)'. At x=0 'cothx' is undefined. The function tends to -1 for very large, negative x and to 1 for large positive x. The syntax is 'cothx'.",
        " Examples: coth1= 1.3130352855",
        "           coth(5*3rt2)= 1.0000067494",
        "           coth(-80)= -1",
        "           cothi= (-0.6420926159*i)",
        "... is the inverse function of the hyperbolic sine. Domain and codomain are unlimited. The syntax is 'asinhx'. Monotonically the function is increasing and is null at x=0. 'asinhx' equals to 'ln(x+sqrt(x",
        "+1))'.",
        " Examples: asinh0= 0",
        "           asinh(2rt2)= 1.1462158348",
        "           asinh(1/ln(2rt3))= 1.3603429371",
        "           asinh(2+3*i)= (1.9686379258+0.9646585044*i)",
        "... is the inverse function of the hyperbolic cosine. The syntax is 'acoshx'. For real numbers the 'acoshx' is limited to x>=1 and gives values greater than 0. Monotonically the function is increasing and is null at x=1. 'acoshx' equals to 'ln(x+sqrt(x",
        "-1))'. For x>1 'acoshx' equals to 'asinh(sqrt(x",
        "-1))'.",
        " Examples: acosh1= 0",
        "           acosh(2rt2)= 0.881373587",
        "           acosh(1/ln(2rt3))= 1.2064822958",
        "           acosh(e^(3*i))= (0.3673419817+2.7564844355*i)",
        "... is the inverse function of the hyperbolic tangent. The syntax is 'atanhx'. For real numbers 'atanhx' is limited to -1<x<1. The codomain is unlimited. Monotonically the function is increasing and is null at x=0. 'atanhx' equals to '.5*ln((1+x)/(1-x))'.",
        " Examples: atanh0= 0",
        "           atanh.5= 0.5493061443",
        "           atanh(1/99rt2)= 2.8273920182",
        "           atanh(2-3*i)= (0.1469466662+1.8026201313*i)",
        "... is the inverse function of the hyperbolic cotangent. The syntax is 'acothx'. For real numbers 'acothx' is undefined for -1<=x<=1. The codomain is unlimited. Monotonically the function is increasing and is null at x=0. 'acothx' equals to '.5*ln((x+1)/(x-1))' equals to 'atanh(1/x)'.",
        " Examples: acoth2= 0.5493061443",
        "           acoth(2rt2)= 0.881373587",
        "           acoth(1/ln2)= 0.853988048",
        "           acoth0= (1.5707963268*i)",
        "Example: sum over all square numbers from 1 through 100 divided by 2:",
        "          \"rechne sum(x,1,100,x",
        "                      ",
        "sum function (arbitrary rechne expression)",
        "                      ",
        "end value (arbitrary rechne expression)",
        "                      ",
        "begin value (arbitrary rechne expression)",
        "                      ",
        "loop variable (arbitrary word)",
        "The 'sum' function allows for summing over values of a function within an interval with a step width of 1. The borders and the actual sum function can be aritrary rechne expressions. However the borders (1 and 100 in the example above) must result in integers! Loop functions can be wrapped in other loop functions.",
        "Example: \"rechne sum(x,1,10,x+sum(y,-2,5,y*x))\".",
        "Please mind: in the loop function every occurring of the loop variable gets replaced by the integer of this very iteration. For the example of the wrapped sum function the variable x must not be named s, u or m because this would also replace characters of the function name 'sum'.",
        "A more sophisticated example:",
        "  rechne n=8",
        "  rechne -v mean=sum(a,2,n+1,ANSa)/n",
        "  rechne -v std=sqrt(sum(a,3,n+2,(ANSa-mean)",
        ")/(n-1))",
        "  rechne -v var=ANS",
        "Explanation: Assuming there are 8 values saved as results which can be accessed via 'ANS', the mean of them is the sum over them (starting from 2 because the last result would be the 8 we saved as 'n') divided by the number of those values (n). The standard deviation is the square root of the sum over the squared differences of those values (now starting from 3 because the last ANS is 'mean' and the second last 'n') from the mean, divided by n-1.",
        "The variance is simply the squared standard deviation (which is now 'ANS' or 'std').",
        "Example: product of all square numbers from 1 through 5 divided by 2:",
        "          \"rechne prd(x,1,5,x",
        "                      ",
        "product function (arbitrary rechne expression)",
        "                      ",
        "end value (arbitrary rechne expression)",
        "                      ",
        "begin value (arbitrary rechne expression)",
        "                      ",
        "loop variable (arbitrary word)",
        "The product function allows for the multiplication of values of a function within an interval with a step width of 1. The borders and the actual sum function can be aritrary rechne expressions. However the borders (1 and 5 in the example above) must result in integers! Loop functions can be wrapped in other loop functions.",
        "Example: \"rechne prd(x,1,5,x+sum(y,-2,x,y))\".",
        "Please mind: in the loop function every occurring of the loop variable gets replaced by the integer of this very iteration. For the example of the wrapped sum function the variable x must not be named s, u or m because this would also replace characters of the function name 'sum'.",
        "The product of integers grows very quickly. Depending on the borders and on the product function the result may take very large values. The factorial (see \"fac ?\") is the most trivial form of a product function. '7!' equals 'prd(x,1,7,x)'. See the manpage of 'sum' for further examples of loop function applications.",
        "rechne.exe can solve definite integrals approximately. This can be applied for getting the area under a curve.",
        "Example: Area under x",
        " from 0 through 3:",
        "          \"rechne int(x,0,3,x",
        "                      ",
        "function (arbitrary rechne expression)",
        "As rechne.exe cannot solve indefinite integrals, the result is the sum over the area of narrow rectangles under the curve. By default the width of these rectangles is the width of the interval devided by 1000. Intending to minimize errors the curve gets sampled in the middle of the rectangles. However small differences from the theoretical solution are likely.",
        "Hence the 'sum' function (see 'sum ?') is a special case of the definite integral. The difference is that the sum function always uses rectangle widths of 1 and does not support fractional borders.",
        "Via the variable 'SAMPLES' the number of samples can be changed. This overwrites the default of 1000. The example above gives exactly 9. However using the default of 1000 samples rechne.exe returns a result of 8.99999775. This is an error of 0.000025%. Increasing the number of samples to 10.000 decreases the error rate to 0.00000025% but it also causes ten times the effort for calculating.",
        "Example: Set number of samples to 10.000: \"rechne SAMPLES=10000\"",
        "The function 'randx' gives a random natural number from 0 to x-1. x must be natural. A computer or algorithm can never produce \"real\" randomness. rechne.exe uses sources provided by the operating system to create random numbers.",
        " Examples: random integer either 0 or 1: \"rechne rand2\"",
        "           random integer between 10 and 20: \"rechne rand11+10\"",
        "           number between 0 and 1 with 4 places: \"rechne rand10000/10000\"",
        "... is an infinite sequence in which the value of each element is the sum of the two previous elements. By definition the sequence starts with 0 and 1 and is named after its finder Leonard Fibonacci. In rechne.exe 'fibx' gives the value of the xth element of the fibonacci sequence. x must be natural.",
        "The sequence can be used for describing the population development of rabbits.",
        "For lager x, the quotient of two neighboring fibonacci numbers converges to the golden section (1.618...).",
        " Examples: fib10= 55",
        "           fib11= 89",
        "           fib101/fib100= 1.6180339887",
        "... moves complex numbers in the Cartesian coordinate system to the unit circle (change in length), leaving the angle unchanged. So the abolsule value (length) always becomes 1. For complex numbers in the polar form the factor before e becomes 1. The syntax is 'sigx'.",
        "Applied to real numbers this means:   x<0 -> sigx = -1",
        "                                      x>0 -> sigx = 1",
        "                                      sig0 = 0",
        " Examples: sig(5*e^(2*i))= (-0.4161468365+0.9092974268*i)",
        "           sig(-15)= -1",
        "           sig(1E-50)= 1",
        "'floor' rounds a real number down to the nearest integer. For negative x the nearest smaller integer is in fact greater (in terms of the magnitude). The syntax is 'floorx' where x must be real.",
        " Examples: floor15.9= 15",
        "           floor15= 15",
        "           floor(-15.000000001)= -16",
        "'ceil' (from ceiling) rounds a real number up to the nearest integer. For negative x the nearest greater integer is in fact smaller (in terms of the magnitude). The syntax is 'ceilx' where x must be real.",
        " Examples: ceil15.9= 16",
        "           ceil15= 15",
        "           ceil(-15.000000001)= -15",
        "'creal' gives the real part of a complex number as a real number. For complex numbers in the algebraic form this means: creal(a+b*i) = a. For complex numbers in the polar form this means: creal(r*e^(p*i)) = r*cosp. Real numbers x are being left unchanged.",
        " Examples: creal(2+3*i)= 2",
        "           creal(3*e^(Pi/2*i))= 0",
        "           creal13= 13",
        "'cimg' gives the imaginary part of a complex number as a real number. For complex numbers in the algebraic form this means: cimg(a+b*i) = b. For complex numbers in the polar form this means: cimg(r*e^(p*i)) = r*sinp. For real numbers x 'cimgx' returns 0 (no imaginary part).",
        " Examples: cimg(2+3*i)= 3",
        "           cimg(3*e^(Pi/2*i))= 3",
        "           cimg13= 0",
        "'cabs' gives the absolute value (magnitude) of a complex number as a real number. For complex numbers in the algebraic form this means: cabs(a+b*i) = sqrt(a",
        "). For complex numbers in the polar form this means: cabs(r*e^(p*i)) = |r|. For real numbers this means: cabsx = |x|.",
        " Examples: cabs(3+4*i)= 5",
        "           cabs(3*e^(Pi/2*i))= 3",
        "           cabs(-17.71)= 17.71",
        "'carg' gives the argument (angle) of a complex number as a real number. For complex numbers in the algebraic form this means: carg(a+b*i) = atan(b/a). For complex numbers in the polar form this means: carg(r*e^(p*i)) = p. All complex numbers are 2Pi-periodic. 'carg' always returns the angle between 0 and 2*Pi (principal value).",
        "Applied to real numbers this means:  x>=0 -> cargx = 0",
        "                                     x<0  -> cargx = Pi",
        " Examples: carg(3+4*i)= 0.927295218",
        "           carg(3*e^(5*i))= 5",
        "           carg7= 0",
        "           carg(-7)= 3.1415926536",
        "The max(min) function returns the greatest(smallest) real number from an arbitrary list of real numbers. The functions are not defined on complex numbers.",
        " Examples: max(4+1,-5.2,3,4.9)= 5",
        "           max(sin(1.5),sin(1.6))= 0.999573603",
        "           max(-4,0,4)= 4",
        "           min(-4,0,4)= -4",
        "The maxc(minc) function returns the complex numbers with the greatest(smallest) absolute value (magnitude, see \"cabs ?\") from an arbitrary list of complex numbers. If two complex numbers have the same magnitude, the first of them remains greatest(smallest) number.",
        " Examples: maxc(4,-5,3,2.1)= -5",
        "           maxc(2-4*i,3*i)= (2-4*i)",
        "           maxc(2-4*i,3*i,-5)= -5",
        "           minc(2-4*i,3*i,-5)= (3*i)",
        "...of an arbitrary list natural numbers returns the greatest natural number which divides all numbers without a rest.",
        "If the numbers passed are coprime the greatest common divisor is 1.",
        "For more than two arguments applies 'gcd(x,y,z)=gcd(gcd(x,y),z)'.",
        " Examples: gcd(1071,1029)= 21",
        "           gcd(1071,1029,49)= 7",
        "           gcd(1071,1071+1)= 1",
        "...of an arbitrary list of natural numbers returns the smallest natural number which is a multiple of all numbers.",
        "If the numbers passed are coprime the least common multiple is the product of all numbers.",
        "The calculation is processed via the greatest common divisor: 'lcm(x,y)=x*y/gcd(x,y)'.",
        "For more than two arguments applies 'lcm(x,y,z)=lcm(lcm(x,y),z)'.",
        " Examples: lcm(15,22,20)= 660",
        "           lcm(3528,3780)= 52920",
        "           lcm(359,371)= 133189",
        "...is the decomposition of integers in their prime factors. The rechne.exe function 'factor' uses the quadratic sieve algorithm to find prime factors of a natural number. 'factor(x)' only prints the prime factors of x and the return value is x again.",
        "The factorization of very large integers that consist of few large prime factors only is a tough mathematical problem and may take very long. The security of the modern crypto system RSA is based on this mathematical problem.",
        "Nowadays the factorization of an RSA-2048 bit key would take years or even decades. This is the security RSA bases on. RSA is used in very many applications for the encryption of communication channels (like https) or document signatures.",
        "rechne.exe is not a program particularly for finding prime factors. Significantly more efficient methods exist.",
        "The 'factor(x)' function in rechne.exe returns the number of prime factors of the input number x. Use parameter '-v' to see what the prime factors are.",
        " Examples: factor(660)= 2*2*11*3*5 -> 5",
        "           factor(33133)= 17*1949 -> 2",
        "           factor(33133784373478)= 2*928979*23*775367 -> 4",
        "'ds' returns the sum of all digits of a number in the decimal representation. In case of non-integer numbers the decimal point is simply ignored.",
        " Examples: ds(660)= 6+6+0 = 12",
        "           ds(33133)= 3+3+1+3+3 = 13",
        "           ds(33133784373478)= 64",
        "           ds(123.45)= 15",
        "The digit sum is the sum of all digits in a number. 'dsi' (digit sum iterative) does apply the digit sum as long as the result is only one digit. By use of the option '-v' the executed iterations are printed.",
        " Examples: dsi(660)= 3",
        "           dsi(33133)= 4",
        "           dsi(33133784373478)= 1",
        "           dsi(123.45)= 6",
        "'dp' returns the product of all digits of a number in the decimal representation. In case of non-integer numbers the decimal point is simply ignored.",
        " Examples: dp(661)= 6*6*1 = 36",
        "           dp(33133)= 3*3*1*3*3 = 81",
        "           dp(123.45)= 120",
        "The digit product is the product of all digits in a number. 'dpi' (digit product iterative) does apply the digit product as long as the result is only one digit. The number of iterations until the final result is reached, is also called 'multiplicative persistence'. By use of the option '-v' the executed iterations are printed.",
        " Examples: dpi(661)= 8",
        "           dpi(33133)= 8",
        "           dpi(123.45)= 2",
        "... is an irrational and transcendental real number. The numerical value is 3.1415926535... In geometry Pi describes the ratio of a circles circumference to the diameter. Pi is a small letter from the Greek abc.",
        "Pi has an infinite number of decimal places and is not periodic. However computers can only handle a limited number of places. Hence using Pi in rechne.exe the results may vary a little from the theoretical solutions.",
        "Pi can be described by the infinite sequence '4*sum(x,0,...,(-1)^x/(2*x+1))' (after Leibnitz). Using 100.000 iterations approximates Pi to the fifth decimal place.",
        "           3*e^(Pi/2*i)= (3*i)",
        "           cosPi= -1",
        "e=2.718281828459... (after the Swiss mathematician Leonhard Euler) is a irrational and transcendental real number. e is the base of the natural lograithm and (natural) exponential function. e is a very fundamental constant in many fields of science and can be connected to a lot of phenomena in nature.",
        "As Pi, e has an infinite number of decimal places and is not periodic. However computers can only handle a limited number of places. Hence using e in rechne.exe the results may vary a little from the theoretical solutions.",
        "e can be described by the infinite sequence 'sum(x,0,...,1/x!)'. Due to the quick convergence of the factorial 10 iterations already give a fairly accurate approximation.",
        " Examples: sqrt8*e^(Pi/4*i)= (2+2*i)",
        "           ln(e^7)= 7",
        "           (e+2)/7= 0.6740402612",
        "Using 'ANS' allows for referencing the last result in the current input. So complex (or long) calculations can be performed step by step. If there is no such result to reference 'ANS' returns 0 and a warning occurs. The last 50 results will be saved. After this limit is reached, the oldest result gets overwritten. Results will be saved for the duration of a single rechne.exe session only.",
        "If certain values shall be saved permanently they have to be put into the ini-file to be loaded at the beginning of every rechne.exe session.",
        " Examples: \"rechne ln(e^8)\"",
        "           \"rechne ANS!\"",
        "           \"rechne ANS/ANS2\"= 5040",
        "Currently holds: ANS  = ",
        "No results saved yet.",
        "              ANS%u = ",
        "(previous but one result)",
        "Numbers in rechne.exe get formatted automatically. If needed up to 10 decimal places are used and very large or very small numbers are displayed in the E format (see \"E ?\"). Using the option \"-p [x]\" between \"rechne\" and the term allows for determining the number of decimal places to round to. [x] has to be an integer between 0 (rounding all numbers to integers) and 15. This suppresses the use of the E formatting.",
        "Please mind: This option has no influence on internal calculations, but affects the display of numbers only.",
        " Examples: \"rechne -p0 Pi\"= 3",
        "           \"rechne -p5 Pi\"= 3.14159",
        "           \"rechne -p15 Pi\"= 3.141592653589793",
        "Using \"rechne -i [x] [term]\" allows for specifying an input numeral system. This numeral system then applies to all numbers within the term. By default rechne.exe expects decimal numbers (this corresponds with '-i 10'). To make rechne.exe parse binary numbers [x] has to be 2. For hexadecimal numbers (0-9A-F) 16 respectively. This works up to the numeral system with base 62 (0-9A-Za-z).",
        "Please mind: The output of numbers (by default decimal numbers) remains unchanged.",
        " Examples: \"rechne -i2 100101.110*11001\"",
        "           \"rechne -v -i 16 ABDFE+1818C\"",
        "Using \"rechne -i [x] [term]\" allows for specifying an output numeral system to display the final result with. By default rechne.exe outputs the final result as decimal number (this corresponds with '-o 10'). To make rechne.exe convert the final result to a binary number [x] has to be 2. For a hexadecimal number (0-9A-F) 16 respectively. This works up to the numeral system with base 62 (0-9A-Za-z).",
        "Calculating with complex numbers '-o' can be used with the argument \"polar\". This makes rechne.exe display all complex numbers in the polar (exponential) format.",
        "For numeral systems other than decimal up to 50 places after the point are used if needed and if not specified differently with '-p'.",
        "Please mind: This option has no influence on internal calculations, but affects the display of numbers only.",
        " Examples: \"rechne -o2 1234.5678*10\"",
        "           \"rechne -v -o16 sin(Pi/2*3)\"",
        "           \"rechne -o polar 3+4*i\"",
        "Using 'set' allows for saving certain options for the duration of the rechne.exe session. For example \"rechne -p2 -v set\" applies a precision of two decimal places and the printing of intermediate steps to all following calculations in this rechne.exe session.",
        "Options used without 'set' get applied to the single calculation only and temporarily overwrite permanent options.",
        "'set' best can be used in the ini-file to make rechne.exe always apply certain options on starting.",
        " Examples: -v set",
        "           -i16 -v set",
        "Using 'define' allows for the definition of own functions for the duration of the rechne.exe session. The syntax is \"define name(arg1,arg2,...)=function\". For example \"define sc(x)=sin(x)*cos(x)\" defines a function to calculate the product of sine and cosine of a number. That function can now be called, for example \"rechne sc(Pi/2)\". The use of round brackets is mandatory.",
        "rechne.exe always tries to parse internal functions first, before trying to parse user functions. Hence new function names must not begin with existing function names.",
        "Defining functions does not perform syntactical checks on the function term. Calling previously defined functions causes simple string replacements ('sc(x)' becomes '(sin(x)*cos(x))' becomes '(sin(Pi/2)*cos(Pi/2))'). Afterwards syntactical checks are performed as normal.",
        " Examples: define max(a,b)=(a<=b)*b+(a>b)*a",
        "           define min(a,b)=(a<=b)*a+(a>b)*b",
        "           max(5/2,3)*min(2,1)",
        "No manual page for topic \"%s\" found!",
        "rechne.exe - Page %d: %s",
        "----------------------",
        "(previous result)",
        "modulus",
        "The modulus",
        "factorial",
        "The factorial",
        "raising",
        "Raising to an arbitrary power",
        "shift decimal point",
        "Shifting the decimal point",
        "Root extraction",
        "square root",
        "The square root",
        "logarithm",
        "The logarithm",
        "natural logarithm",
        "The natural logarithm",
        "decimal logarithm",
        "The decimal logarithm",
        "binary logarithm",
        "The binary logarithm",
        "parallel operation",
        "The parallel operation",
        "binominal coefficient",
        "The binominal coefficient",
        "sinc function",
        "The sinc function",
        "The sine",
        "cosine",
        "The cosine",
        "tangent",
        "The tangent",
        "secant",
        "The secant",
        "cosecant",
        "The cosecant",
        "cotangent",
        "The cotangent",
        "arcsine",
        "The arcsine",
        "arccosine",
        "The arccosine",
        "arctangent",
        "The arctangent",
        "arcsecant",
        "The arcsecant",
        "arccosecant",
        "The arccosecant",
        "arccotangent",
        "The arccotangent",
        "hyperbolic sine",
        "The hyperbolic sine",
        "hyperbolic cosine",
        "The hyperbolic cosine",
        "hyperbolic tangent",
        "The hyperbolic tangent",
        "hyperbolic cotangent",
        "The hyperbolic cotangent",
        "area hyperbolic sine",
        "The area hyperbolic sine",
        "area hyperbolic cosine",
        "The area hyperbolic cosine",
        "area hyperbolic tangent",
        "The area hyperbolic tangent",
        "area hyperbolic cotangent",
        "The area hyperbolic cotangent",
        "numerical integral",
        "The sum function",
        "product integral",
        "The product function",
        "definite integral",
        "The definite integral",
        "random number",
        "The random function",
        "fibonacci sequence",
        "The fibonacci sequence",
        "signum function",
        "The signum function",
        "round-down",
        "Rounding down",
        "round-up",
        "Rounding up",
        "real part",
        "The real part of a complex number",
        "imaginary part",
        "The imaginary part of a complex number",
        "absolute value",
        "The absolute value of a complex number",
        "polar angle",
        "The argument of a complex number",
        "greatest real number",
        "Greatest (smallest) real number",
        "smallest real number",
        "greatest magnitude",
        "Greatest (smallest) magnitude",
        "smallest magnitude",
        "greatest common divisor",
        "The greatest common divisor",
        "least common multiple",
        "The least common multiple",
        "factor",
        "factorization",
        "The integer factorization",
        "Digit sum",
        "The digit sum",
        "Iterative digit sum",
        "The iterative digit sum",
        "Digit product",
        "The digit product",
        "Iterative digit product",
        "The iterative digit product",
        "The number Pi",
        "Euler's number",
        "previous results",
        "Using previous results",
        "Precision (decimal places)",
        "Input numeral system",
        "Output numeral system",
        "Set options permanently",
        "define",
        "Define own functions",
        "?READFILE",
        "RR@rechne.exe",
        "UNKNOWNFORMAT",
        "BNVARNAME",
        "MALLOC",
        "INTERNAL",
        "INPUTOVERFLOW",
        "PARSING",
        "MISSINGBRACKET",
        "MISSINGPARAM",
        "UNKNOWNOPT",
        "OPTNUMBER",
        "DEFINE",
        "ARGMISMATCH",
        "ASSIGN",
        "NAMEAMBIGUOUS",
        "VARNAME",
        "GEONOSUCHPOINT",
        "GEONOPOINTS",
        "GEOUSAGE",
        "LOOPVAR",
        "LOOPFUNCTION",
        "ENDSTARTONSUM",
        "LOOPBORDER",
        "NOTANATNUM",
        "NOTANINTEGER",
        "NOCOMPLEX",
        "NOCOMPLEXONDEG",
        "DOMAIN",
        "DISPLAYMANFILE",
        "WRITEFILE",
        "GEOPARSE",
        " Welcome to the rechne shell!    ",
        " This is rechne.exe 3.1          ",
        "rechne.exe 3.1 (%dbit en) - 10/2020",
        "Free Software (Gnu General Public License v3, see 'license.txt')",
        "https://rechne-exe.sourceforge.io",
        "Syntax:   rechne [options] [term]",
        "Options: --version => Print release information",
        "         -v        => Print all intermediate steps",
        "         -q        => Print result only",
        "         -y        => No questions (answer all with 'yes')",
        "         -p [x]    => Set precision to [x] decimal places",
        "                      (see: \"-p ?\")",
        "         -i [x]    => Set input numeral system (e.g. 2 for binary numbers)",
        "                      (see: \"-i ?\")",
        "         -o [x]    => Set output numeral system (e.g. 2 for binary numbers)",
        "                      (see: \"-o ?\")",
        "         -o polar  => Print complex numbers in polar format",
        "         bn        => Change to big number mode",
        "                      (see: \"bn ?\")",
        "         geo       => Change to geo number mode",
        "                      (see: \"geo ?\")",
        "         set       => Set options for this session permanently",
        "                      (see: \"set ?\")",
        "         define    => Define own functions",
        "                      (see: \"define ?\")",
        "         list vars => List all saved variables",
        "         list defines => List all defined functions",
        "Syntax:   rechne@bn [options] [term]",
        "Options: -v              => Print all intermediate steps",
        "         -p              => Print numbers without colons, spaces, line breaks",
        "         -q              => Print result only",
        "         -y              => No questions (answer all with 'yes')",
        "         -f [x]          => Print the first [x] bytes only (see: \"-f ?\")",
        "         -l [x]          => Print the last [x] bytes only (see: \"-f ?\")",
        "         -i [bin|dec|low|x|b64] => Input numbers dual, decimal, hex (lower",
        "                            case), binary or base64 (see: \"-i ?\")",
        "         -o [bin|dec|low|x|b64] => Output numbers dual, decimal, hex (lower",
        "                            case), binary or base64 (see: \"-o ?\")",
        "         -s [filename]   => Save the result to a file (see: \"-s ?\")",
        "         set             => Set options for this session permanently",
        "                            (see: \"set ?\")",
        "         list vars       => Print information on the saved variables",
        "ARN@rechne.exe",
        "WARNING %d (W%s)",
        "No such variable \"%s\" found. Using 0 instead.",
        "The variable SAMPLES is no integer!",
        "> Using default value (%d) instead.",
        "Right shift causes loss of non-zero bytes!",
        "Unknown warning!",
        "NOSUCHVAR",
        "SAMPLES",
        "LOSSSHIFTRIGHT",
        "LOSSDIV",
        "Division leaves a rest. See variable 'REST'.",
        "LOSSSQRT",
        "Square root extraction leaves a rest. See variable 'REST'.",
        "ERROR %d (E%s)",
        "Cannot allocate sufficient memory for this operation.",
        "Internal error (%s). This should not happen.",
        "The input exceeds the input buffer.",
        "> Try decomposing into multiple inputs.",
        "Unexpected symbol in this context: \"%s\"!",
        ">                          Position:  ",
        "> Want a decimal point? Write points as '.'!",
        "> Want a complex number? Write imaginary unit as 'i'!",
        "> Want Pi? Write Pi as 'Pi'!",
        "Missing bracket '%s'",
        "The option '%s' requires a parameter!",
        "Unknown option '%s'!",
        "Incorrect number of arguments!",
        "> Do not use spaces within the term!",
        "The option '-%c' requires an integer in the range %s!",
        "> See \"-%c ?\"",
        "A function definition must comply with \"name(arg1,arg2...)=[term]\"!",
        "> For example: \"define myfunc(x)=sin(x)*cos(x)\"",
        "The function \"%s\" requires %d parameter!",
        "> See manpage \"%s ?\"",
        "Assignments must comply with [name]=[term]!",
        "The %s name must have at most 20 characters, contain letters,",
        "> numbers, _ and . only and not start with a number!",
        "There is already a function or variable starting with \"%s\"!",
        "> Choose a different name.",
        "Cannot read the file \"%s\".",
        "Cannot write the file \"%s\".",
        "Cannot display the manpage. 'more' installed?",
        "'%s' is not defined here!",
        "Degree functions are not defined on complex numbers!",
        "\"%s\" is not defined on complex numbers!",
        "The function \"%s\" can process integers only!",
        "> See \"%s ?\"!",
        "The function \"%s\" can process natural numbers only!",
        "> See \"%s ?\"!",
        "Start and end value must be integers!",
        "The start value must be smaller than the end value.",
        "Syntax error. \"%s(loopvar,startvalue,endvalue,function)\"",
        "> expected. See \"%s ?\"!",
        "The loop variable must be no longer than 5 characters and contain letters only!",
        "The result is not a number.",
        "Cannot parse the input!",
        "The variable name must not start with A-F (confusion with hex numbers)!",
        "> Consider naming it 'var_a' instead of 'a'.",
        "> Also the variable name must not start with existing function names!",
        "Unknown format \"%s\"!",
        "Due to the error '%s' the big number cannot be printed.",
        "Incorrect number of arguments!",
        "> Do not use spaces within the term!",
        "There are no geo points defined to perform a bearing on!",
        "> Enter a geo coordinate first!",
        "Point/line with name \"%s\" does not exist!",
        "The input '%s' cannot be parsed.",
        "> Possible inputs are:",
        ">   - a point in decimal format e.g. '51.123,12.456'",
        ">   - a point in decimal minutes e.g. 'N51",
        "20.123,E012",
        "23.456'",
        ">   - the name of a stored point/line",
        ">   - a bearing e.g. '100m,57",
        "Unknown error!",
        "--- %s: precision: %d",
        "%%.%df",
        "--- %s: format string is: %s",
        "print_double2",
        "rechne.ini",
        "--- %s: execute line: \"%s\"",
        "rechne.ini: Error in line %u: %s",
        "rechne@bn",
        "rechne",
        "rechne@geo",
        "--- %s: return_code=%d ---",
        "read_ini",
        "rechne.exe 3.1 (%dbit en)",
        "Lde/jsteltze/rechne/Rechne$RechneResult;",
        "(Lde/jsteltze/rechne/Rechne;IDD)V",
        "<init>",
        "%s: JNI class not found!!!",
        "java/io/IOException",
        "pipe failed",
        "fdopen failed",
        "read failed",
        "Java_de_jsteltze_rechne_Rechne_rechne",
        "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
        "%%s%%.%us",
        "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        "--- %s: '%s'->%u (len=%u)",
        "--- %s: result=%f",
        "--- %s: in=\"%s\" complex=%d",
        "%lf%lf",
        "--- %s: got %d number(s)",
        "--- %s: '%c' (get:'%s'): %s",
        "--- %s: finished (%d)",
        "--- %s: num_args=%d",
        "--- %s: arg%d=\"%s\"",
        "--- %s: get: %s (%d)",
        "--- %s: %s",
        "--- %s: %s (%lu)",
        "                                   ",
        "--- %s: in=\"%s\" <- %s size=%d len_diff=%d",
        "--- %s: out=\"%s\"",
        "replace",
        "build_args2",
        "parse_func_w_x_args",
        "free_argv",
        "substr",
        "string_to_cn",
        "string_to_double_without_E",
        "                ",
        "--- %s: PARSE LOOP: body=\"%s\" len=%d",
        "--- %s: var=\"%s\"",
        "--- %s: parse_sumfkt: fkt_start=\"%s\" len=%d",
        "--- %s: parse_sumfkt: fkt_ende=\"%s\" len=%d",
        "--- %s: parse_sumfkt: fkt_miti=\"%s\" len=%u",
        "--- %s: fct_start=\"%s\"",
        "--- %s: fct_end=\"%s\"",
        "--- %s: fct=\"%s\"",
        "--- %s: PARSE LOOP: \"%s\" -> with %s (%f to %f)",
        "--- %s: PARSE LOOP: FCT: \"%s\"",
        "--- %s: PARSE LOOP: total length: %d",
        "SAMPLES",
        "Using %d samples",
        "--- %s: PARSE LOOP: step width: %f",
        "--- %s: Send to main_routine \"%s\" (fct: \"%s\")",
        "--- %s: GET: value=%f-%f",
        "parse_sumfkt",
        "sum_up",
        ",,,,,,,,,,,,,,,,",
        "%d%s%d",
        "%s+%d%s",
        "%s%s%d",
        "------------------",
        "- Level %u",
        "Could not parse your input... try again!",
        "CORRECT! time:%.1fs points:%u total:%u",
        "WRONG! Correct was:%.0f total points:%u",
        "\"%s\" is already defined with \"%s\".",
        "Overwrite? ",
        "--- %s: name=\"%s\"",
        "'define' aborted.",
        "--- %s: head=\"%s\"",
        "--- %s: arg%d=\"%s\"",
        "--- %s: body=\"%s\"",
        "Function defined.",
        "%d function%s defined%s",
        "%s)=%s",
        "add_user_func",
        "--- %s: %s (%f-%f) num_vars=%u",
        "Variable \"%s\" is already allocated with ",
        "Overwrite? ",
        "Result saved in \"%s\".",
        "--- %s: %s -> %f-%f",
        "--- %s: %s -> no match",
        "--- %s: %f-%f",
        "--- %s: num=%d num_ans=%d",
        "--- %s: free %d vars",
        "%d variable(s) defined%s",
        "  %s= ",
        "free_all_vars",
        "get_ans",
        "add_ans",
        "get_user_var",
        "add_user_var",
        "Output will be very long. Continue? ",
        "--- %s: %p (%u bytes)",
        "--- %s: %p",
        "Overwrite value of \"%s\"? ",
        "Naming conflict with existing variable '%s'",
        "Calculating the decimal number (about %u places) may take a while.",
        "Continue? ",
        "00000000",
        "      ...",
        "         ",
        "%c%c%c%c",
        "%c%c==",
        "%c%c%c=",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
        "%d variable(s) defined",
        "  %s= ",
        " (allocated: %u Byte, MSB: %u)",
        "bn_get_bit",
        "bn_print",
        "bn_assign_with_byte_array",
        "bn_assign_with_bn",
        "bn_assign_with_hexstr",
        "bn_assign_with_base64str",
        "bn_assign_with_decstr",
        "bn_assign_with_binstr",
        "bn_assign_with_str",
        "bn_assign_with_uint",
        "bn_free",
        "bn_create",
        "333333",
        "$@--- %s",
        "          Required time: %lu milliseconds",
        "            Memory used: %u bytes",
        "       Operations count: %u shift(s),",
        "                         %d addition(s),",
        "                         %d subtraction(s)",
        "     Time per operation: %lu nanoseconds",
        "  Operations per second: %lu",
        "bn_cleanup",
        "TRUE -> probable prime",
        "FALSE -> composite",
        "FALSE (0)",
        "TRUE (1)",
        "rand(%d Bit)",
        "prime(%d Bit)",
        "--- %s: start processing ---",
        "--- %s: get args: %d: %s",
        "--- %s: file redirect to: \"%s\"",
        "--help",
        "--- %s: system('cls') returns %d",
        "speedtest",
        "--- %s: getopt: c=%c optind=%d",
        "f:l:yqpvi:o:s:",
        "--- %s: after getopt: optind=%d (argc=%d)",
        "--- %s: PARAMETER: verbosity=%u i=%u o=%u",
        "--- %s: bn_in_format: %d",
        "--- %s: bn_out_format: %d",
        "--- %s: add number from ANS",
        "--- %s: add number from '%s'",
        "--- %s: recognize string as number: %s",
        "--- %s: add bracket '('",
        "--- %s: add bracket ')'",
        "--- %s: add number from REST",
        "--- %s: add zero automatically",
        "--- %s: add ANS automatically",
        "--- %s: add operand '%s'",
        "--- %s: add function '%s'",
        "--- %s: add function %s",
        "--- %s: unexpected symbol at pos %d (%d)",
        "--- %s: NUMBER[%d]: ",
        "--- %s: input string was: \"%s\"",
        "--- %s: OPERAND[%d]: %d",
        "Result",
        " (hex):",
        " (dec):",
        " (bin):",
        " (base64):",
        "Overwrite value of \"%s\"? ",
        "Saved as \"%s\".",
        "bn_routine",
        "rechne.manpage.out",
        "                       rechne.exe 3.1 - Big Number Mode                  10/2020",
        "--------------------------------------------------------------------------------",
        "In the default mode rechne.exe treats numbers as floating point objects. Hence very large, very small, fractional and negative numbers are displayable. But from a certain size on \"insignificant\" decimal places get lost.",
        "For example \"rechne -p0 1E20+1\" gives the result 10000000000. The added 1 got lost because the floating point object had its job displaying the large exponent. For most scientific calculations this rounding is acceptable.",
        "However especially computer science and cryptography require ways to process very large numbers without any losses. In this context numbers are rather a stream of bytes where no bit must get lost. The rechne.exe bn (big number) mode allows for calculating with such numbers.",
        "NO fractional numbers are supported here (only integers).",
        "The size of numbers to calculate with is only limited by the amount of memory the operating system provides. If 100 MB memory can be allocated this corresponds with a 250 million decimal places number.",
        "Not all operations known from the default mode are supported in the bn mode, too. Some additional operations can be performed for big numbers only. By default big number inputs and outputs are hexadecimal (upper case: 0-9A-F).",
        "Supported functions and operations:",
        "%28s: %s",
        "|%28s: %s",
        "Available constants:",
        "last result",
        "rest of the last operation",
        "rechne@bn",
        "For more information on a particular function: \"%s <function> -?\"",
        "E.g.: \"%s sqrt ?\"",
        "Binary operations:",
        "The operations Not (~), Or (|), And (&), Xor (^), left shift (<<) and right shift (>>) allow for a bitwise manipulation of big numbers. Keep in mind that even the number of places to shift have to be given in hexadecimal (if no '-i' option used).",
        "Example: Shift a 1024 bit random numbers by 2 bytes to the left:",
        "  \"rechne@bn (rand400)<<10\" or \"rechne@bn -i dec (rand1024)<<16\"",
        "Local variables",
        "With 'name=...' big number results can be saved in local variables. In contrast to option '-s' local variables are only available while rechne.exe is running. To prevent confusion with hex numbers the variable name must not start with A-F.",
        "With \"list vars\" information on the currently saved variables can be printed.",
        " Examples: \"rechne@bn p=prime(100)\"",
        "           \"rechne@bn q=prime(100)\"",
        "           \"rechne@bn p*q\"",
        "Comparisons:",
        "Same as in default mode. Example: \"rechne@bn p==q\"",
        "Redirecting outputs to files:",
        "Same as in default mode.",
        "Speedtest:",
        "With the speedtest rechne.exe allows for the possibility to measure the time a set of expensive calculations consumes. The numbers and operations used are fixed so the result can be used to compare CPU performance and efficiency of the algorithms used. As expensive calculations multiple Miller-Rabin-Tests on large prime numbers, a RSA 4096 bit encryption (see \"powmod ?\") and a square root finding by Heron (see \"sqrt ?\") are performed.",
        "The speed mainly results from the CPU performance but may vary (e.g. because of other programs running).",
        "   Syntax: \"rechne@bn speedtest\".",
        "Type 'exit' or 'quit' to return to default mode.",
        "Johannes Steltzer, 10/2020",
        "https://rechne-exe.sourceforge.io",
        "... of two big numbers is performed bytewise starting from the least significant bit (LSB). The sum is at most one bit greater than the greatest of both summands. Together with subtraction and shifting the addition belongs to the basic operations all other operations and functions can be decomposed to.",
        " Examples: 12:34:56:FF:0B+CC:DD:01:94= 13:01:34:00:9F",
        "           AFFE007+1FF7= 0A:FF:FF:FE",
        "... of two big numbers is performed bytewise starting from the least significant bit (LSB). Big numbers in rechne.exe do not have a sign. If the subtrahend is greater than the minued a warning appears and the result is zero. Together with addition and shifting the subtraction belongs to the basic operations all other operations and functions can be decomposed to.",
        " Examples: 12:34:56:FF:0B-CC:DD:01:94= 11:67:79:FD:77",
        "           AFFE007-1FF7= 0A:FF:C0:0F",
        "... of two big numbers is performed with left-shifts and additions. Because shifts are even for big numbers fairly quick this method intends to improve performance. The number of shifts and additions is determined by the number of binary ones of one of the factors. To again reduce the computational expense rechne.exe always takes the factor with the fewest ones for this.",
        "The length of the product is always about the sum of the length of both factors.",
        "Cryptographic algorithms (e.g. ECC) may require the modulus of a multiplication (see \"mod ?\").",
        " Examples: 12:34:56:FF:0B*CC:DD:01:94= 0E:91:6C:9F:11:89:C9:7D:5C",
        "           AFFE007*1FF7= 01:5F:A4:01:DF:C8",
        "... of two big numbers is performed with right-shifts and subtractions. Because shifts are even for big numbers fairly quick this method intends to improve performance. In rechne.exe big numbers cannot be fractional. If division cannot be performed without a rest a warning appears and the rest is assigned to the variable 'REST' (see \"REST ?\" for more information).",
        " Examples: 01:5F:A4:01:DF:C8/1FF8= 0A:FF:E0:07",
        "           0E:91:6C:9F:11:89:C9:7D:5C/CC:DD:01:94= 12:34:56:FF:0B",
        "... of two big numbers is the rest of their division. The Syntax is 'x%y' or 'xmody'. The modulus can also be determined by first dividing and then reading the variable 'REST' (see \"REST ?\").",
        " Examples: 01:5F:A4:01:DF:C8%%1000= 0F:C8",
        "           0E:91:6C:9F:11:89:C9:7D:5CmodCC:DD:01= 63:A3:94",
        "In bn mode raising of a base to an exponent is performed with the function 'pow'. The syntax is 'xpowy'. Exponentiation gets decomposed into squares and multiplications (\"square&multiply\"). This leads to a faster computation than multiplications only.",
        "Even for relatively small exponents the result quickly takes very large values.",
        "All involved big numbers are held in the main memory at all time of calculations. So the size of big numbers is limited by the amount of memory the operating system can provide. With exponentiation the length of result is about exponent times the length of the base. For example a 1024 bit big number to the power of 800 (\"(rand400)pow320\") gives a 819200 bit long number. The calculation will need about 300 KB of memory.",
        "Cryptographic functions (e.g. RSA) may require the modulus of an exponentiation. In rechne.exe the algorithm of the modulo-exponentiation has higher performance than separated exponentiation and modulo finding and requires less memory.",
        "PLEASE MIND: in default mode '^' serves as the exponentiation operator where in bn mode it serves as the XOR operator (exclusive OR).",
        " Examples: AFFE007pow3= 05:32:D2:AA:70:C5:C6:A4:ED:A1:57",
        "           04:00pow4= 01:00:00:00:00:00",
        "... in rechne.exe is going to be applied automatically if an exponentiation is followed by a modulo finding (syntax 'xpowx%z' or 'xpowymodz'). Modulo-exponentiation is an important operation within the RSA crypto system.",
        "Theoretically there is no difference between separated exponentiation and modulo finding (one after the other). However in praxis a separated exponentiation would produce such large numbers that memory and time consumption would be far away from being reasonable. Modulo-exponentiation applies modulo finding frequently to the intermediate results and hence keeps the result small. This intends to reduce the calculation effort to a minimum.",
        "To explicitly suppress the application of modulo-exponentiation exponentiation and modulo finding have to be processed in two different steps, either by using brackets ('(xpowy)modz') or by forcing two different calculation steps ('xpowy' and 'ANSmodz').",
        "... finding in rechne.exe is done with Herons algorithm. The calculation consists of divisions, additions and right-shifts. For very large numbers the calculation may take a while. The syntax is 'sqrtx'. Similar to division a warning appears if a rest remains. In this case the rest is assigned to the variable 'REST' (see \"REST ?\").",
        " Examples: sqrtAFFE007= 35:10",
        "           sqrt(rand400)= ...",
        "The function 'rand(x)' creates a x bit long random number. However this does not mean that the most significant bit has to be 1. With a chance 1 to 255 the whole first byte can be zero.",
        "PLEASE MIND: If no '-i' option used x must be given hexadecimal!",
        " Examples: 1024 bit random number: \"rand400\"",
        "           random number smaller than 256 bit: \"rand(rand8)\"",
        "The function 'gcd(num1,num2)' allows for calculating the greatest common divisor between two big numbers num1 and num2.",
        " Example: gcd(AFFE00ABC,123ABC) -> 0C",
        " Examples: gcd(AFFE00ABC,123ABC)= 0C",
        "           gcd(118,44C)= 14",
        "The Miller-Rabin-Test is a probabilistic primality test. The call is 'mrt(n,a)' where 'n' is the big number to test and 'a' (1 < a < n-1) is another number needed for the algorithm. The result is either 0 (then 'n' is definitively NOT prime) or 1 (probable prime).",
        "Please note, that a positive result is no proof of a prime number! To increase the probability, the Miller-Rabin-Test should be executed with many different 'a'.",
        " Examples: mrt(3DAB9,14C8C)= 0",
        "           mrt(1990D,17798)= 1",
        "The 'prime(x)' returns a (probable) prime number of length x bits. The implementation is: Let 'n' be a random odd number of length x bits (see 'rand ?'). For 30 different random values 'a' (2<=a<=32767 and a<n) the Miller-Rabin-Test is executed (see 'mrt ?'). A probable prime number is found, if the Miller-Rabin-Test returns 1 in all of the 30 executions.",
        "As soon as MRT returns 0 on a single 'a' then the entire process is repeated with another random 'n'.",
        "Due to the many test iterations the whole process may take some time for finding big primes. The process requires many random numbers. rechne.exe uses the random function provided by the operating system.",
        "PLEASE MIND: If no '-i' option used x must be given hexadecimal!",
        " Examples:  256 bit prime number: \"prime(100)\"",
        "           1024 bit prime number: \"prime(400)\"",
        "The rechne.exe implementation of the Extended Euklidean Algorithm (eea) returns for two input numbers a and b a result t, such that: gcd(a,b)=(t*b)mod(a). (with gcd as greatest common divisor). So t is the multiplicative inverse of b modulo a.",
        "As always input and output numbers are hexadecimal if not otherwise specified (see -i/-o).",
        " Examples: eea(63,4E)= 0E",
        "           eea(17,78)= 2F",
        "The variable 'ANS' contains the result of the last calculation. In bn mode 'ANS' gets created after the first calculation and freed on closing rechne.exe. If 'ANS' is used uninitialized a warning appears and the value will be zero. For reasons of memory consumption 'ANS' always contains the last result only (in contrast to the default mode).",
        " Examples: rand400",
        "           ANSpow2",
        "Currently holds:",
        "Division and square root finding may leave a rest which gets assigned to the variable 'REST'. 'REST' gets freed on closing rechne.exe. If 'REST' is used uninitialized a warning appears and the value is zero. For reasons of memory consumption 'REST' gets overwritten on every new division or square root extraction.",
        " Examples: sqrt(rand400)",
        "           REST",
        "Currently holds:",
        "REST =",
        "The function 'read([filename])' is for the conversion of a file into a big number. Depending on the currently used input format (see \"-i ?\") the file content will be treated like manual inputs.",
        "[filename] can be a relative or absolute path. The filename/path MUST NOT contain spaces!",
        "With 'read' previously saved (option '-s') results can be accessed.",
        "With '-s' (see \"-s ?\") written results, are always in the specified output format. This used output format has to be used as input format (use of '-i' option) when reading those files again.",
        "If a binary file shall be read as big number, the input option '-ix' together with 'read(file)' is to be used.",
        "In case of a file with a bit string, the option '-ibin' is to be used etc.",
        "If errors occur with the reading, the file needs to be checked weather it only contains valid values from the wanted input format.",
        "For example with base64 files the header and trailer (\"----- BEGIN ...\") need to be removed before such files can be read.",
        " Example: create two prime numbers, save them and read again:",
        "    \"rechne@bn -s prime1 prime(100)\"",
        "    \"rechne@bn -s prime2 prime(100)\"",
        "    \"rechne@bn -v read(prime1)*read(prime2)\"",
        " Print the first 10 bytes of a binary file: \"rechne@bn -ix -f10 read(filename)\"",
        "In bn mode by default all inputs (saved variables, too) are expected in hexadecimal (0-9A-F). Using the option '-i' allows for a change of the input numeral system. Possible values are:",
        "   'low' - lower case hexadecimal numbers (0-9a-f)",
        "   'bin' - binary numbers (0-1)",
        "   'dec' - decimal numbers (0-9)",
        "     'x' - binary code as input",
        "   'b64' - base64 as input",
        "The difference between 'bin' and 'x' is that 'bin' expects text as input which consists of the ASCII characters 0 and 1. 'x' in contrast reads the complete amount of all possible byte values (256) and interprets them as a number. This can be used for reading binary files as numbers. Because also operands like + and - belong to the amount of possible byte values '-ix' cannot be used for calculating but for reading one single number only.",
        "Example: Create random bytes in Linux and pass to rechne.exe for reading as a number and saving under 'URANDOM':",
        "  dd if=/dev/urandom bs=128 count=4 | ./rechne.exe bn -ix -sURANDOM",
        "The defined format gets applied to ALL numbers in the current input. Reading large decimal numbers (\"-i dec\") needs the most effort and may take a while (depending on the CPU power).",
        " Examples: \"rechne@bn -idec -o low rand1024\"",
        "           \"rechne@bn -i bin 101001110*10100111111\"",
        "           \"rechne@bn -idec -odec rand1024\"",
        "In bn mode by default all outputs are hexadecimal (0-9A-F). Using the option '-o' allows for a change of the output numeral system. Possible values are:",
        "   'low' - lower case hexadecimal numbers (0-9a-f)",
        "   'bin' - binary numbers (0-1)",
        "   'dec' - decimal numbers (0-9)",
        "     'x' - binary code as output",
        "   'b64' - output in base64",
        "The difference between 'bin' and 'x' is that 'bin' outputs readable text (consisting of the characters 0 and 1) where 'x' in contrast displays the result as binary code readable by machines only. The output on the screen may not be wise. But writing the binary code to a file might be useful.",
        "Example: Save a 1024 bit random numbers as a binary file:",
        "  rechne@bn -ox rand400 >> 1024bit.bin",
        "The defined format gets applied to ALL outputs (also saving results using '-s'). The output of large decimal numbers needs the most effort and may take a while (depends on the CPU power).",
        " Examples: \"rechne@bn -odec rand400\"",
        "           \"rechne@bn -o bin AFFE007*ABCDEF012345\"",
        "... can be performed with the '-s' option. The syntax is: \"rechne@bn -s [name] [term]\". File name will be [name]. The numbers can be referenced with read([name]).",
        "Written files are NOT removed! So they still exist after rechne.exe has died. Consider removing files manually.",
        "The option '-o' allows for a change of the output numeral system (see \"-o ?\"). This applies for the '-s' option, too. When reading a saved number, the same input numeral system (see \"-i ?\") has to be used as this number was saved with in order to get the correct number back.",
        " Examples: \"rechne@bn -s RAND rand1024\"",
        "           \"rechne@bn -v read(RAND)pow2\"",
        "           \"rechne@bn -sDECNUM -v -odec AFFE007*FFAA\"",
        "           \"rechne@bn -v -idec read(DECNUM)/125\"",
        "By use of the option '-f[x]' or '-l[x]' only the first or last [x] bytes of a big number are printed. This might be useful for very large numbers (or files). The option only has effect if the output format (-o) is hexadecimal, dual or binary.",
        " Examples: \"rechne@bn -f10 rand(400)\"",
        "           \"rechne@bn -l10 ANS\"",
        " Print the first 10 bytes of a binary file: \"rechne@bn -ix -f10 read(filename)\"",
        "Using 'set' allows for saving certain options for the duration of the rechne.exe session. For example \"rechne -odec -v set\" applies the output as decimal numbers and the printing of intermediate steps to all following calculations in this rechne.exe session.",
        "Options used without 'set' get applied to the single calculation only and temporarily overwrite permanent options.",
        "'set' best can be used in the ini-file to make rechne.exe always apply certain options on starting.",
        " Examples: -v set",
        "           -v -odec set",
        "No manual page for topic \"%s\" found!",
        "rechne.exe - Big Number Mode Page %d: %s",
        "----------------------",
        "addition",
        "The addition",
        "subtraction",
        "The subtraction",
        "multiplication",
        "The multiplication",
        "division",
        "The division",
        "modulus",
        "The modulus",
        "raising",
        "Raising to a power",
        "powmod",
        "modulo-exponentiation",
        "The modulo-exponentiation",
        "square root",
        "The square root",
        "random number",
        "The random function",
        "read big number from file",
        "Reading a big number from a file",
        "greatest common divisor",
        "GCD between two big numbers",
        "Miller-Rabin-Test",
        "Test if a big number is (probable) prime",
        "find a prime number",
        "Find a prime number of the specified length",
        "Extended Euklidean Algorithm",
        "Find the multiplicative inverse of two numbers",
        "Using the last result",
        "The rest of the last operation",
        "Saving results in a file",
        "Input numeral system",
        "Output numeral system",
        "Print only first/last number of bytes",
        "Set options permanently",
        "--- %s",
        "eea coefficient s=",
        "test n%u=",
        "probable prime found after %u iterations, tested with %d random 'a'",
        "FALSE (composite)",
        "Miller-Rabin-Test with a=%u -> %s",
        "TRUE (probable prime)",
        "init_div_cache",
        "init_mul_cache",
        "clean_mul_cache",
        "clean_div_cache",
        "TRUE (probable prime)",
        "FALSE (composite)",
        "(1) Miller-Rabin-Test: check primality with a=65537...",
        "(2) Speedtest: RSA-4096 Encryption...",
        "(3) Speedtest: square root by Heron...",
        "Distance:",
        "%30s %10.0f m",
        "Azimuth (initial):",
        "%30s %10.2f ",
        "Azimuth (final):",
        "Azimuth (median):",
        "line%u",
        "from %f,%f to %f,%f:",
        "%-22s%c %f,%f",
        "    in minutes&seconds: %s%02d",
        "%d'%.1f\",%s%03d",
        "%d'%.1f\"",
        "                   UTM: %u%c E%.0f N%.0f",
        "    openstreetmap link: https://www.openstreetmap.org/?mlat=%.6f&mlon=%.6f#map=16/%.6f/%.6f",
        "Distance -> to Prime meridian:  %10.0f m",
        "         -> to Equator:         %10.0f m",
        "         -> to North pole:      %10.0f m",
        "         -> to South pole:      %10.0f m",
        "         -> to %-17s%10.0f m",
        "Azimuth (median):",
        "Azimuth (initial):",
        "Azimuth (final):",
        "         %s->%s: %5.1f",
        "         %s->%s: %5.1f",
        "Midpoint: ",
        "North-South difference: ",
        "         %s-><-%s: ",
        "East-West difference: ",
        "         %s<-->%s: %10.0f m",
        "--------------------------------------------------",
        "Triangle %s,%s,%s:",
        "---%s: diff1=%.1f diff2=%.1f",
        "         enclosed angle %s: %5.1f",
        "         surface area: %.1f %s",
        "    in decimal minutes: %s%02d",
        "%.3f,%s%03d",
        "--- %s: %f %f",
        "There is already a point '%s'. Overwrite? ",
        "--- %s: P%u: %f %f",
        "line 'line%u' added",
        "--- %s: %f",
        "--- %s: north_2str: %s",
        "--- %s: term1=%s term2=%s",
        "--- %s: dist=%f bearing=%f",
        "To which point shall the bearing be applied? ",
        "--- %s: (%fm %f%s)",
        "%u point(s)",
        "  '%s': %f,%f",
        "%u line(s)",
        "  'line%u': %f,%f -> %f,%f",
        "geo_parse",
        "geo_parse_dec_format",
        "add_point",
        "print_point_info",
        "--- %s: start processing ---",
        "--- %s: get args: %d: %s",
        "--- %s: file redirect to: \"%s\"",
        "--help",
        "--- %s: system('cls') returns %d",
        "--- %s: getopt: c=%c optind=%d",
        "--- %s: after getopt: optind=%d (argc=%d)",
        "--- %s: PARAMETER: verbosity=%u",
        "--- %s: term=%s",
        "--- %s: name=%s",
        "intersection of 'line%u' and 'line%u':",
        "--- %s: result=%f,%f",
        "from %f,%f to %f,%f:",
        "geo_routine",
        "rechne.manpage.out",
        "                             rechne.exe 3.1 - Geo-Modus                  10/2020",
        "--------------------------------------------------------------------------------",
        "In geo mode rechne.exe can process geo coordinates. The coordinates are transformed into different representations and in case of multiple points the distance, azimuth and (for three points) the area of the triangle is calculated.",
        "There are several methods to calculate the distance between two geo points. Because Earth is spherical the curvature has to be considered. rechne.exe uses Vincenty's formulae which considers the elliptical anomaly (Earth is not a perfect spherical) and is hence a bit more precise than Haversine.",
        "All functions use 6378137 m as median Earth radius.",
        "As input the program expects a coordinate as latitude and longitude, separated by a comma. There must be no spaces in the input! If the input could be processed information about the coordinate are printed and the point is stored.",
        "When now more points are added, the program calculates the distance, angle etc. between all stored points.",
        "  Example: \"rechne@geo 51.44533,12.75354\"",
        "The format of the coordinate can also be in decimal degrees:",
        "  Example: \"rechne@geo N51",
        "26.7198,E12",
        "45.2124\"",
        "Points can be assigned a name. Then they can be referenced using the name.",
        "  Example: \"rechne@geo a=51.44533,12.75354\"",
        "Points can be moved by a distance and azimuth (bearing). The result is a new point.",
        "  Example: \"rechne@geo 51.44533,12.75354->100m,127",
        "  Example: \"rechne@geo a->100m,127",
        "The option \"-d [src] [dst]\" draws a line between two points. See \"-d ?\".",
        "The function \"cut(line0,line1)\" calculates the intersection point between two lines. See \"cut ?\".",
        "Type 'list' to display all assigned points/lines.",
        "Type 'exit' or 'quit' to return to default mode.",
        "Type 'cls' or 'clear' to remove all previous entered points and outputs.",
        "Johannes Steltzer, 10/2020",
        "https://rechne-exe.sourceforge.io",
        "The function 'cut(line0,line1)' calculates the intersection point between two geografical lines. The result is a point, which can be saved using the assignment e.g. 'x=cut(line0,line1)'.",
        "Lines can be created using the '-d' option (see '-d ?'). The name of lines is always 'line', followed by the index. Existing lines can be displayed with 'list'.",
        " Examples: rechne@geo -d 51,12 48,8",
        "           rechne@geo -d 50,0 56,-3",
        "           rechne@geo cut(line0,line1)",
        "Using the option \"-d [src] [dst]\" prints the distance and azimuth between the point [src] and point [dst].",
        "A point can be referenced by the name of a previously stored point or directly via latitude,longitude (decimal or degrees).",
        "Also '-d' creates a line defined by both points. Lines are always named 'line' followed by a index.",
        "           rechne@geo x=50,-4",
        "           rechne@geo -d x 49,-5",
        "No manual page for topic \"%s\" found!",
        "--- %s: a=%f b=%f angle=%f",
        "--- %s: a=%f,%f %f,%f",
        "--- %s: b=%f,%f %f,%f",
        "lineIntersection",
        "triangleArea",
        "Argument domain error (DOMAIN)",
        "Argument singularity (SIGN)",
        "Overflow range error (OVERFLOW)",
        "Partial loss of significance (PLOSS)",
        "Total loss of significance (TLOSS)",
        "The result is too small to be represented (UNDERFLOW)",
        "Unknown error",
        "_matherr(): %s in %s(%g, %g)  (retval=%g)",
        "Mingw-w64 runtime failure:",
        "Address %p has no image-section",
        "  VirtualQuery failed for %d bytes at address %p",
        "  VirtualProtect failed with code 0x%x",
        "  Unknown pseudo relocation protocol version %d.",
        "  Unknown pseudo relocation bit size %d.",
        ".pdata",
        "POSIXLY_CORRECT",
        "unknown option -- %s",
        "unknown option -- %c",
        "option doesn't take an argument -- %.*s",
        "ambiguous option -- %.*s",
        "option requires an argument -- %s",
        "option requires an argument -- %c",
        "__powi",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "GCC: (x86_64-win32-seh-rev0, Built by MinGW-W64 project) 8.1.0",
        "rechne.exe",
        "Java_de_jsteltze_io_NativeInputStream_close",
        "Java_de_jsteltze_io_NativeInputStream_init",
        "Java_de_jsteltze_io_NativeInputStream_read",
        "Java_de_jsteltze_rechne_Rechne_rechne",
        "Java_de_jsteltze_rechne_Rechne_version",
        "DeleteCriticalSection",
        "EnterCriticalSection",
        "GetCurrentProcess",
        "GetCurrentProcessId",
        "GetCurrentThreadId",
        "GetLastError",
        "GetStartupInfoA",
        "GetSystemTimeAsFileTime",
        "GetTickCount",
        "InitializeCriticalSection",
        "LeaveCriticalSection",
        "QueryPerformanceCounter",
        "RtlAddFunctionTable",
        "RtlCaptureContext",
        "RtlLookupFunctionEntry",
        "RtlVirtualUnwind",
        "SetUnhandledExceptionFilter",
        "TerminateProcess",
        "TlsGetValue",
        "UnhandledExceptionFilter",
        "VirtualProtect",
        "VirtualQuery",
        "__C_specific_handler",
        "__argv",
        "__getmainargs",
        "__initenv",
        "__iob_func",
        "__lconv_init",
        "__set_app_type",
        "__setusermatherr",
        "_acmdln",
        "_amsg_exit",
        "_cexit",
        "_close",
        "_errno",
        "_fdopen",
        "_fmode",
        "_initterm",
        "_onexit",
        "_time64",
        "_unlink",
        "_vsnprintf",
        "calloc",
        "fclose",
        "fprintf",
        "freopen",
        "fwrite",
        "getenv",
        "isprint",
        "malloc",
        "memcpy",
        "memmove",
        "memset",
        "printf",
        "putchar",
        "realloc",
        "rewind",
        "setvbuf",
        "signal",
        "sscanf",
        "strchr",
        "strcmp",
        "strcpy",
        "strlen",
        "strncmp",
        "strstr",
        "system",
        "vfprintf",
        "KERNEL32.dll",
        "msvcrt.dll",
        "GNU C17 8.1.0 -mtune=core2 -march=nocona -g -g -g -O2 -O2 -O2 -fno-ident -fbuilding-libgcc -fno-stack-protector",
        "../../../../../src/gcc-8.1.0/libgcc/libgcc2.c",
        "C:\\mingw810\\x86_64-810-win32-seh-rt_v6-rev0\\build\\gcc-8.1.0\\x86_64-w64-mingw32\\libgcc",
        "long long unsigned int",
        "long long int",
        "uintptr_t",
        "wchar_t",
        "short unsigned int",
        "long int",
        "unsigned int",
        "long unsigned int",
        "unsigned char",
        "long double",
        "double",
        "__imp___mb_cur_max",
        "_sys_errlist",
        "_sys_nerr",
        "__imp___argc",
        "__imp___argv",
        "__imp___wargv",
        "__imp__environ",
        "__imp__wenviron",
        "__imp__pgmptr",
        "__imp__wpgmptr",
        "__imp__osplatform",
        "__imp__osver",
        "__imp__winver",
        "__imp__winmajor",
        "__imp__winminor",
        "_amblksiz",
        "__security_cookie",
        "optarg",
        "optind",
        "opterr",
        "optopt",
        "_daylight",
        "_dstbias",
        "_timezone",
        "_tzname",
        "daylight",
        "timezone",
        "tzname",
        "short int",
        "hashval_t",
        "htab_hash",
        "htab_eq",
        "htab_hash_pointer",
        "htab_eq_pointer",
        "stringop_alg",
        "no_stringop",
        "libcall",
        "rep_prefix_1_byte",
        "rep_prefix_4_byte",
        "rep_prefix_8_byte",
        "loop_1_byte",
        "unrolled_loop",
        "vector_loop",
        "last_alg",
        "unspec_strings",
        "unspecv_strings",
        "stringop_strategy",
        "noalign",
        "stringop_algs",
        "unknown_size",
        "processor_costs",
        "shift_var",
        "shift_const",
        "mult_init",
        "mult_bit",
        "divide",
        "large_insn",
        "move_ratio",
        "movzbl_load",
        "int_load",
        "int_store",
        "fp_move",
        "fp_load",
        "fp_store",
        "mmx_move",
        "mmx_load",
        "mmx_store",
        "xmm_move",
        "ymm_move",
        "zmm_move",
        "sse_load",
        "sse_unaligned_load",
        "sse_store",
        "sse_unaligned_store",
        "mmxsse_to_integer",
        "ssemmx_to_integer",
        "gather_static",
        "gather_per_elt",
        "scatter_static",
        "scatter_per_elt",
        "l1_cache_size",
        "l2_cache_size",
        "prefetch_block",
        "simultaneous_prefetches",
        "branch_cost",
        "sse_op",
        "sqrtss",
        "sqrtsd",
        "reassoc_int",
        "reassoc_fp",
        "reassoc_vec_int",
        "reassoc_vec_fp",
        "memcpy",
        "memset",
        "cond_taken_branch_cost",
        "cond_not_taken_branch_cost",
        "ix86_cost",
        "ix86_size_cost",
        "ix86_tune_indices",
        "X86_TUNE_SCHEDULE",
        "X86_TUNE_PARTIAL_REG_DEPENDENCY",
        "X86_TUNE_SSE_PARTIAL_REG_DEPENDENCY",
        "X86_TUNE_SSE_SPLIT_REGS",
        "X86_TUNE_PARTIAL_FLAG_REG_STALL",
        "X86_TUNE_MOVX",
        "X86_TUNE_MEMORY_MISMATCH_STALL",
        "X86_TUNE_FUSE_CMP_AND_BRANCH_32",
        "X86_TUNE_FUSE_CMP_AND_BRANCH_64",
        "X86_TUNE_FUSE_CMP_AND_BRANCH_SOFLAGS",
        "X86_TUNE_FUSE_ALU_AND_BRANCH",
        "X86_TUNE_ACCUMULATE_OUTGOING_ARGS",
        "X86_TUNE_PROLOGUE_USING_MOVE",
        "X86_TUNE_EPILOGUE_USING_MOVE",
        "X86_TUNE_USE_LEAVE",
        "X86_TUNE_PUSH_MEMORY",
        "X86_TUNE_SINGLE_PUSH",
        "X86_TUNE_DOUBLE_PUSH",
        "X86_TUNE_SINGLE_POP",
        "X86_TUNE_DOUBLE_POP",
        "X86_TUNE_PAD_SHORT_FUNCTION",
        "X86_TUNE_PAD_RETURNS",
        "X86_TUNE_FOUR_JUMP_LIMIT",
        "X86_TUNE_SOFTWARE_PREFETCHING_BENEFICIAL",
        "X86_TUNE_LCP_STALL",
        "X86_TUNE_READ_MODIFY",
        "X86_TUNE_USE_INCDEC",
        "X86_TUNE_INTEGER_DFMODE_MOVES",
        "X86_TUNE_OPT_AGU",
        "X86_TUNE_AVOID_LEA_FOR_ADDR",
        "X86_TUNE_SLOW_IMUL_IMM32_MEM",
        "X86_TUNE_SLOW_IMUL_IMM8",
        "X86_TUNE_AVOID_MEM_OPND_FOR_CMOVE",
        "X86_TUNE_SINGLE_STRINGOP",
        "X86_TUNE_MISALIGNED_MOVE_STRING_PRO_EPILOGUES",
        "X86_TUNE_USE_SAHF",
        "X86_TUNE_USE_CLTD",
        "X86_TUNE_USE_BT",
        "X86_TUNE_AVOID_FALSE_DEP_FOR_BMI",
        "X86_TUNE_ADJUST_UNROLL",
        "X86_TUNE_ONE_IF_CONV_INSN",
        "X86_TUNE_USE_HIMODE_FIOP",
        "X86_TUNE_USE_SIMODE_FIOP",
        "X86_TUNE_USE_FFREEP",
        "X86_TUNE_EXT_80387_CONSTANTS",
        "X86_TUNE_GENERAL_REGS_SSE_SPILL",
        "X86_TUNE_SSE_UNALIGNED_LOAD_OPTIMAL",
        "X86_TUNE_SSE_UNALIGNED_STORE_OPTIMAL",
        "X86_TUNE_SSE_PACKED_SINGLE_INSN_OPTIMAL",
        "X86_TUNE_SSE_TYPELESS_STORES",
        "X86_TUNE_SSE_LOAD0_BY_PXOR",
        "X86_TUNE_INTER_UNIT_MOVES_TO_VEC",
        "X86_TUNE_INTER_UNIT_MOVES_FROM_VEC",
        "X86_TUNE_INTER_UNIT_CONVERSIONS",
        "X86_TUNE_SPLIT_MEM_OPND_FOR_FP_CONVERTS",
        "X86_TUNE_USE_VECTOR_FP_CONVERTS",
        "X86_TUNE_USE_VECTOR_CONVERTS",
        "X86_TUNE_SLOW_PSHUFB",
        "X86_TUNE_AVOID_4BYTE_PREFIXES",
        "X86_TUNE_USE_GATHER",
        "X86_TUNE_AVOID_128FMA_CHAINS",
        "X86_TUNE_AVX256_UNALIGNED_LOAD_OPTIMAL",
        "X86_TUNE_AVX256_UNALIGNED_STORE_OPTIMAL",
        "X86_TUNE_AVX128_OPTIMAL",
        "X86_TUNE_AVX256_OPTIMAL",
        "X86_TUNE_DOUBLE_WITH_ADD",
        "X86_TUNE_ALWAYS_FANCY_MATH_387",
        "X86_TUNE_UNROLL_STRLEN",
        "X86_TUNE_SHIFT1",
        "X86_TUNE_ZERO_EXTEND_WITH_AND",
        "X86_TUNE_PROMOTE_HIMODE_IMUL",
        "X86_TUNE_FAST_PREFIX",
        "X86_TUNE_READ_MODIFY_WRITE",
        "X86_TUNE_MOVE_M1_VIA_OR",
        "X86_TUNE_NOT_UNPAIRABLE",
        "X86_TUNE_PARTIAL_REG_STALL",
        "X86_TUNE_PROMOTE_QIMODE",
        "X86_TUNE_PROMOTE_HI_REGS",
        "X86_TUNE_HIMODE_MATH",
        "X86_TUNE_SPLIT_LONG_MOVES",
        "X86_TUNE_USE_XCHGB",
        "X86_TUNE_USE_MOV0",
        "X86_TUNE_NOT_VECTORMODE",
        "X86_TUNE_AVOID_VECTOR_DECODE",
        "X86_TUNE_BRANCH_PREDICTION_HINTS",
        "X86_TUNE_QIMODE_MATH",
        "X86_TUNE_PROMOTE_QI_REGS",
        "X86_TUNE_EMIT_VZEROUPPER",
        "X86_TUNE_LAST",
        "ix86_tune_features",
        "ix86_arch_indices",
        "X86_ARCH_CMOV",
        "X86_ARCH_CMPXCHG",
        "X86_ARCH_CMPXCHG8B",
        "X86_ARCH_XADD",
        "X86_ARCH_BSWAP",
        "X86_ARCH_LAST",
        "ix86_arch_features",
        "x86_prefetch_sse",
        "_dont_use_tree_here_",
        "x86_mfence",
        "reg_class",
        "NO_REGS",
        "AD_REGS",
        "CLOBBERED_REGS",
        "Q_REGS",
        "NON_Q_REGS",
        "TLS_GOTBASE_REGS",
        "INDEX_REGS",
        "LEGACY_REGS",
        "GENERAL_REGS",
        "FP_TOP_REG",
        "FP_SECOND_REG",
        "FLOAT_REGS",
        "SSE_FIRST_REG",
        "NO_REX_SSE_REGS",
        "SSE_REGS",
        "EVEX_SSE_REGS",
        "BND_REGS",
        "ALL_SSE_REGS",
        "MMX_REGS",
        "FP_TOP_SSE_REGS",
        "FP_SECOND_SSE_REGS",
        "FLOAT_SSE_REGS",
        "FLOAT_INT_REGS",
        "INT_SSE_REGS",
        "FLOAT_INT_SSE_REGS",
        "MASK_EVEX_REGS",
        "MASK_REGS",
        "MOD4_SSE_REGS",
        "ALL_REGS",
        "LIM_REG_CLASSES",
        "dbx_register_map",
        "dbx64_register_map",
        "svr4_dbx_register_map",
        "processor_type",
        "PROCESSOR_GENERIC",
        "PROCESSOR_I386",
        "PROCESSOR_I486",
        "PROCESSOR_PENTIUM",
        "PROCESSOR_LAKEMONT",
        "PROCESSOR_PENTIUMPRO",
        "PROCESSOR_PENTIUM4",
        "PROCESSOR_NOCONA",
        "PROCESSOR_CORE2",
        "PROCESSOR_NEHALEM",
        "PROCESSOR_SANDYBRIDGE",
        "PROCESSOR_HASWELL",
        "PROCESSOR_BONNELL",
        "PROCESSOR_SILVERMONT",
        "PROCESSOR_KNL",
        "PROCESSOR_KNM",
        "PROCESSOR_SKYLAKE",
        "PROCESSOR_SKYLAKE_AVX512",
        "PROCESSOR_CANNONLAKE",
        "PROCESSOR_ICELAKE_CLIENT",
        "PROCESSOR_ICELAKE_SERVER",
        "PROCESSOR_INTEL",
        "PROCESSOR_GEODE",
        "PROCESSOR_K6",
        "PROCESSOR_ATHLON",
        "PROCESSOR_K8",
        "PROCESSOR_AMDFAM10",
        "PROCESSOR_BDVER1",
        "PROCESSOR_BDVER2",
        "PROCESSOR_BDVER3",
        "PROCESSOR_BDVER4",
        "PROCESSOR_BTVER1",
        "PROCESSOR_BTVER2",
        "PROCESSOR_ZNVER1",
        "PROCESSOR_max",
        "ix86_tune",
        "ix86_arch",
        "ix86_preferred_stack_boundary",
        "ix86_incoming_stack_boundary",
        "regclass_map",
        "signed char",
        "UQItype",
        "__int128",
        "__int128 unsigned",
        "complex float",
        "complex double",
        "complex long double",
        "_Float128",
        "complex _Float128",
        "__popcount_tab",
        "__clz_tab",
        "func_ptr",
        "__CTOR_LIST__",
        "__DTOR_LIST__",
        "../../../../../src/gcc-8.1.0/libgcc/config/i386",
        "cygwin.S",
        "\"\"gY0uKgg0=L\"\"",
        "C:/mingw810/x86_64-810-win32-seh-rt_v6-rev0/mingw64/mingw/include",
        "C:/mingw810/src/gcc-8.1.0/include",
        "../.././gcc",
        "C:/mingw810/src/gcc-8.1.0/gcc/config/i386",
        "C:/mingw810/src/gcc-8.1.0/libgcc",
        "../../../../../src/gcc-8.1.0/libgcc",
        "crtdefs.h",
        "stdlib.h",
        "malloc.h",
        "process.h",
        "getopt.h",
        "time.h",
        "hashtab.h",
        "insn-constants.h",
        "i386.h",
        "i386-opts.h",
        "libgcc2.h",
        "gbl-ctors.h",
        "libgcc2.c",
        "../../../../../src/gcc-8.1.0/libgcc/config/i386/cygwin.S",
        "C:\\mingw810\\x86_64-810-win32-seh-rt_v6-rev0\\build\\gcc-8.1.0\\x86_64-w64-mingw32\\libgcc",
        "GNU AS 2.30",
        "crtexe.c",
        "mainret",
        ".l_endw",
        ".l_start",
        ".l_end",
        "atexit",
        ".xdata",
        ".pdata",
        "cygming-crtbegin.c",
        ".xdata",
        ".pdata",
        "config.c",
        "init_cfgP",
        ".xdata",
        ".pdata",
        "factor.c",
        "_factor",
        "factor",
        ".xdata",
        ".pdata",
        ".rdata",
        "kernel.c",
        ".xdata",
        ".pdata",
        ".rdata",
        "main.c",
        ".rdata",
        ".xdata",
        ".pdata",
        "manuals.c",
        ".rdata",
        ".xdata",
        ".pdata",
        "math.c",
        "__asinh",
        "__acosh",
        "__atanh",
        ".rdata",
        ".xdata",
        ".pdata",
        "outputs.c",
        "snprintf0",
        "bn_usage@",
        "warning",
        "put_cn2",
        "put_cn",
        ".xdata",
        ".pdata",
        ".rdata",
        "rechne.c",
        "read_ini",
        ".rdata",
        ".xdata",
        ".pdata",
        "rechne_jni.c",
        ".rdata",
        ".xdata",
        ".pdata",
        "rechne_utils.c",
        "init_num@",
        "init_op",
        "msleep",
        "xalloc",
        "rechne",
        ".xdata",
        ".pdata",
        "string_utils.c",
        "follows",
        "substr",
        "replace",
        ".rdata",
        ".xdata",
        ".pdata",
        "sum_up",
        ".xdata",
        ".pdata",
        ".rdata",
        "trainer.c",
        "result",
        "op_char",
        "trainer",
        ".xdata",
        ".pdata",
        ".rdata",
        "user_func.c",
        ".rdata",
        ".xdata",
        ".pdata",
        "user_var.c",
        "num_vars",
        "add_ans",
        "num_ans",
        "get_ans",
        ".rdata",
        ".xdata",
        ".pdata",
        "snprintf",
        "bn_copy",
        "bn_reset",
        "bn_free",
        "bn_swap",
        "bn_rand",
        "bn_print@7",
        ".xdata",
        ".pdata",
        ".rdata",
        "functions.c",
        "init_bn",
        "mem_add",
        "cur_mem",
        "max_mem",
        "mem_sub",
        ".xdata",
        ".pdata",
        ".rdata",
        "kernel.c",
        ".rdata",
        ".xdata",
        ".pdata",
        "main.c",
        "snprintf",
        ".xdata",
        ".pdata",
        ".rdata",
        "manuals.c",
        "help_bn",
        ".rdata",
        ".xdata",
        ".pdata",
        "math_1.c",
        "bn_AND"
    ],
    "target": {
        "category": "file",
        "file": {
            "crc32": "316FFB39",
            "md5": "63be9bd508bccb9cdcbe5fb0f7b999dc",
            "name": "rechne.exe",
            "path": "/home/cuckoo/.cuckoo/storage/binaries/0978cbffb7f9ee2fdaac2af42cbac239f6224e574502b03b53add8260d968d68",
            "sha1": "f6c6e9689ca970082d3b44e2ec63ab0fa8bac79b",
            "sha256": "0978cbffb7f9ee2fdaac2af42cbac239f6224e574502b03b53add8260d968d68",
            "sha512": "66b01465e33c974a811c29c2276edf3c85ad1e07f07b5363aa1ffe4e262a6aaea8b9a0cacaaf078783fe8418dda4cd4b3b8eb0c755d20d4d019f804c2c73ea14",
            "size": 345477,
            "ssdeep": "6144:5C/zWsXQ7A68McNyGCCjjLPVltAXbTKsj1kGd8:QzFXQ74NyBka/KfGd8",
            "type": "PE32+ executable (console) x86-64, for MS Windows",
            "urls": [
                "https://rechne-exe.sourceforge.io",
                "https://www.openstreetmap.org/?mlat=%.6f"
            ],
            "yara": []
        }
    }
}
